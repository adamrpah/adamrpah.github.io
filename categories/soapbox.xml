<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>NP Complete Heart (soapbox)</title><link>http://www.npcompleteheart.com/</link><description></description><atom:link rel="self" href="http://www.npcompleteheart.com/categories/soapbox.xml" type="application/rss+xml"></atom:link><language>en</language><lastBuildDate>Sun, 06 Dec 2015 03:07:32 GMT</lastBuildDate><generator>https://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Let me just scale this figure down 3 times, then skew it 1.5 times</title><link>http://www.npcompleteheart.com/posts/let-me-just-scale-this-figure-down-3-times-then-skew-it-15-times.html</link><dc:creator>Adam Pah</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;img alt="journal image" src="http://www.npcompleteheart.com/images/publishing_figures.png"&gt;&lt;/p&gt;
&lt;p&gt;
I won't lie, I don't find the process of submitting an academic manuscript or even the post-acceptance rigmarole to be pleasurable. However, the part of this process that most makes me want to put my head through the wall is the insistence of most journals on content being submitted in word documents and raster images.
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;This insistence is asinine.&lt;/b&gt;
&lt;/p&gt;

&lt;!-- TEASER_END --&gt;

&lt;p&gt;
Now let me be clear, I'm not stupid. I know that supporting additional input formats could make the process marginally more difficult or expensive for the journals to accommodate. But honestly, how much more could it reasonably cost to support pdf and vector images in the editorial process?
&lt;/p&gt;

&lt;h4&gt;blah blah blah, why does this even matter?&lt;/h4&gt;

&lt;p&gt;
I &lt;b&gt;care&lt;/b&gt; about what my work looks like. While I am more than satisfied with the formatting on manuscript texts that academic journals provide, I am far less happy with the support for images and the typical insistence on rasterized images being provided. Why is this such a sticking point for me? Because raster images look like ass when they are altered from their original size (some more than others, but all to some degree.
&lt;/p&gt;

&lt;p&gt;
The size that any arbitrary journal decides to publish your figure in is relatively arbitrary as far as I can tell, it may or may not be compressed or stretched and margins will differ between different journal templates. When I provide a vector image (in eps/ps/svg format for those interested) the graphic can be scaled to within reason and still look nice and crisp as I intended in a relatively small file size. While it won't be perfect (text may get too small or big if it's scaled down) at the very least it will always look at least &lt;b&gt;good&lt;/b&gt; (in my mind at least) and, more importantly, &lt;b&gt;crisp&lt;/b&gt;.
&lt;/p&gt;

&lt;p&gt;
Raster images (png/jpg/tiff for the curious) provide none of that. Raster images are built for the size of the original canvas since they are a bitmap. To change the size in any way means either discarding pixel information or inferring it based on the color values of nearby, known cells in the pixel grid. This means that changing the size causes a loss in crispness, &lt;b&gt;especially for text&lt;/b&gt;, and that your resulting image will end up looking like ass.
&lt;/p&gt;

&lt;p&gt; 
I say this because in my last paper I provided an eps image of the chart that I've set as the image of this post. It looks fine at most sizes as an eps, until it gets rather small and that's largely because it needs to be a rather large chart. But when the tiff file for it is resized, it ends up looking rather horrible. However, since this is such a large chart I need to know the dimensions that it will be published as in order for me to optimize the raster image, which I can't do until the proof stage. So now the process becomes:
&lt;br&gt;
&lt;/p&gt;&lt;ol&gt;
&lt;li&gt;Submit placeholder image to journal&lt;/li&gt;
&lt;li&gt;Go through review process&lt;/li&gt;
&lt;li&gt;Get accepted proof, measure published image dimensions&lt;/li&gt;
&lt;li&gt;Resubmit altered raster image to published dimensions&lt;/li&gt;
&lt;/ol&gt;
&lt;br&gt;
All told, I think that process &lt;b&gt;sucks&lt;/b&gt; for both me and the journal. Especially because the method for distribution is predominantly moving to the internet where &lt;b&gt;none of these concerns even matter&lt;/b&gt;.
&lt;/div&gt;</description><category>academia</category><category>hair pull</category><category>research</category><category>soapbox</category><guid>http://www.npcompleteheart.com/posts/let-me-just-scale-this-figure-down-3-times-then-skew-it-15-times.html</guid><pubDate>Sun, 16 Nov 2014 14:39:55 GMT</pubDate></item><item><title>Wild unsupportable claims about how Product X sucks!</title><link>http://www.npcompleteheart.com/posts/wild-unsupportable-claims-about-how-product-x-sucks.html</link><dc:creator>Adam Pah</dc:creator><description>&lt;div&gt;&lt;p&gt;I read an article in the last month that really rubbed me raw, it was this one:
&lt;br&gt;&lt;br&gt;
&lt;a href="http://www.sarahmei.com/blog/2013/11/11/why-you-should-never-use-mongodb/"&gt;Why you should never use MongoDB&lt;/a&gt;
&lt;br&gt;&lt;br&gt;
Why does it bother me so much? Mostly because it’s bullshit, but I also feel that NoSQL solutions (and MongoDB specifically) are getting an undue bad reputation due to “MongoDB/NoSQL is bad” articles making great link-bait. Even more than that, people present themselves as experts when in reality they just make extremely broad claims about a lack of suitability without properly defining what their REAL needs are that make a technology so poor. 
&lt;/p&gt;
&lt;!-- TEASER_END --&gt;

&lt;p&gt;
Why do I say that? Well this quote makes the point really well (emphasis mine):

 &lt;/p&gt;&lt;blockquote&gt;
Well, that’s the million dollar question. But I’ve already answered the billion-dollar question. In this post I’ve talked about how we used MongoDB vs. how it was designed to be used. I’ve talked about it as though all that information were obvious, and &lt;strong&gt;the Diaspora team just failed to research adequately before choosing&lt;/strong&gt;.
&lt;br&gt;
But this stuff wasn’t obvious at all. The MongoDB docs tell you what it’s good at, without emphasizing what it’s not good at. That’s natural. All projects do that. But as a result, it took us about six months, a lot of user complaints, and a lot of investigation to figure out that we were using MongoDB the wrong way.
&lt;/blockquote&gt;

Is it really the fault of the database that a team didn’t research a solution they implemented first? I don’t think so. Especially when the crux of their problem was the fact that no one thought of how to model relationships within a document database before even beginning.


&lt;p&gt;
Modelling relationships within MongoDB actually isn’t that hard, there’s a few options available and even I’ve been able to write about them &lt;a href="http://www.npcompleteheart.com/posts/%E2%80%9Dhttp://www.npcompleteheart.com/post/starting-with-mongo-some-dos-and-donts/%E2%80%9D"&gt;before&lt;/a&gt;. The problem is that the team didn’t want  to bake this part into the code (understandable, but that’s another unstated project need that isn’t a fault of NoSQL) and maintain in light of their familiarity with a traditional SQL backend. Again, that’s a personal choice based on project needs, not a major failing in a database backend.
&lt;/p&gt;

&lt;p&gt;
So let’s look at the real needs again:
&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;Needs to be a solution that integrates with some type of ORM for database interaction so relational joining is not in application code&lt;/li&gt;
&lt;li&gt;Not duplicating data in the database (because hard disk space is precious? because it’s 1999 again?)&lt;/li&gt;
&lt;li&gt;Needs to be familiar enough that team members have prior experience in optimization and usage&lt;/li&gt;
&lt;/ul&gt;

Given that criteria, MongoDB was a horrible solution. The reality is that anything but a traditional SQL backend would have been a terrible decision. But none of those are valid reasons as to &lt;strong&gt;”Why you should never use MongoDB”&lt;/strong&gt;.


&lt;p&gt;
The real lesson is that you should never decide on which technologies a new project will use without discussing your possible needs beforehand. This goes not only for new technologies, but also continuing to use existing technologies. Just like NoSQL isn’t for everything, neither is SQL. It’s just that either one can be forced to work as a solution and be painful to work with for the entire project lifespan.
&lt;/p&gt;

&lt;p&gt;
You reap what you sow, so don’t be lazy. That’s the entire take-away, pretty damn simple right?
&lt;/p&gt;&lt;/div&gt;</description><category>databases</category><category>mongodb</category><category>soapbox</category><guid>http://www.npcompleteheart.com/posts/wild-unsupportable-claims-about-how-product-x-sucks.html</guid><pubDate>Wed, 11 Dec 2013 12:45:46 GMT</pubDate></item><item><title>You know what, I'm going to stand by it.</title><link>http://www.npcompleteheart.com/posts/you-know-what-im-going-to-stand-by-it.html</link><dc:creator>Adam Pah</dc:creator><description>&lt;p&gt;&lt;img alt="SQL Sucks" src="http://www.npcompleteheart.com/images/sql_twitter.png"&gt;&lt;/p&gt;</description><category>random</category><category>soapbox</category><guid>http://www.npcompleteheart.com/posts/you-know-what-im-going-to-stand-by-it.html</guid><pubDate>Sun, 21 Apr 2013 12:42:27 GMT</pubDate></item></channel></rss>