<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>NP Complete Heart (Posts about tutorial)</title><link>http://www.npcompleteheart.com/</link><description></description><atom:link href="http://www.npcompleteheart.com/categories/tutorial.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><lastBuildDate>Thu, 01 Mar 2018 19:09:48 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>An introduction to the how and why of iPython Notebooks</title><link>http://www.npcompleteheart.com/posts/an-introduction-to-the-how-and-why-of-ipython-notebooks.html</link><dc:creator>Adam Pah</dc:creator><description>&lt;div&gt;&lt;p&gt;
This was a presentation and sample notebook that I whipped up for the Amaral lab to explain why and some basic hows of using iPython notebooks. This goes along with my previous &lt;a href="http://www.npcompleteheart.com/post/i-wish-i-knew-then-what-i-know-now-reproducible-me/"&gt;blog&lt;/a&gt; post and has this &lt;a href="http://nbviewer.ipython.org/gist/anonymous/f8e6d8985d2ea0e4bab1"&gt;gist&lt;/a&gt; to go along with it.
&lt;/p&gt;

&lt;!-- TEASER_END --&gt;

&lt;iframe src="http://www.slideshare.net/slideshow/embed_code/36249217" width="476" height="400" frameborder="0" marginwidth="0" marginheight="0" scrolling="no"&gt;&lt;/iframe&gt;&lt;/div&gt;</description><category>ipython</category><category>presentation</category><category>tutorial</category><guid>http://www.npcompleteheart.com/posts/an-introduction-to-the-how-and-why-of-ipython-notebooks.html</guid><pubDate>Tue, 24 Jun 2014 14:35:08 GMT</pubDate></item><item><title>Generate torque submission scripts</title><link>http://www.npcompleteheart.com/posts/generate-torque-submission-scripts.html</link><dc:creator>Adam Pah</dc:creator><description>&lt;div&gt;&lt;p&gt;
Most of us use some form of Torque in an academic environment to run scripts on a cluster. Typically I would have some form of script to generate the necessary qsub scripts for submission, but it wasn't ever generic enough. So this has been my working stab at making that happen. 
&lt;/p&gt;

&lt;!-- TEASER_END --&gt;

&lt;p&gt;
Here is how it works, say that you have a program called "cure_cancer.py" that you want to run on the cluster that takes no arguments. All you would do is type:

&lt;/p&gt;&lt;pre&gt;
$ generate_qsub cure_cancer.py
&lt;/pre&gt;

and then it will generate some file like:

&lt;pre&gt;
$ ls
qsub_cure_cancer_897234.sh
&lt;/pre&gt;

that can be submitted on a cluster normally like:

&lt;pre&gt;
$ qsub qsub_cure_cancer_897234.sh
&lt;/pre&gt;
&lt;p&gt;

&lt;/p&gt;&lt;h5&gt;
Basic submission with arguments
&lt;/h5&gt;
&lt;p&gt;
But what if your script needs an argument, like the filename it should read in?  Simple enough actually.

&lt;/p&gt;&lt;pre&gt;
$ generate_qsub cure_cancer.py whole_lotta_cancer.csv
&lt;/pre&gt;

The script supports an arbitrary number of command arguments, they just have to follow after the program name, be in the correct order for your script, and not contain spaces (REPEAT, NO SPACES IN FILENAMES). Pretty simple. 


&lt;h5&gt;
Basic submission with keyword arguments
&lt;/h5&gt;

&lt;p&gt;
Sometimes we write a program with options to make something more flexible. So we could add to our cancer program to change the parameters of the model like so:
&lt;/p&gt;&lt;pre&gt;
$ python cure_cancer.py --alpha 0.5 --beta 0.3
&lt;/pre&gt;
The qsub generation script supports that too! You just have to tell it so, like:
&lt;pre&gt;
$ generate_qsub cure_cancer.py --kwargs '{"alpha": 0.5, "beta":0.3}'
&lt;/pre&gt;
It just needs to be the name that is given with the '--' option (so no single letters). Also, you can of course use the additional keyword arguments with command line arguments like so:
&lt;pre&gt;
$ generate_qsub cure_cancer.py whole_lotta_cancer.csv --kwargs '{"alpha": 0.5, "beta":0.3}'
&lt;/pre&gt;
That's the end of the basic usage. The generation script automatically recognizes the script type and can differentiate between python and bash.
&lt;p&gt;

&lt;/p&gt;&lt;h5&gt;
Advanced (Options usage)
&lt;/h5&gt;
&lt;p&gt;
There are three additional options to the script that are slightly more advanced. They are: 
&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;"--home_repl"&lt;/li&gt;
&lt;li&gt;"--execute"&lt;/li&gt;
&lt;li&gt;"--temporary"&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;
How to use them:
&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;--home_repl&lt;br&gt;
Allows you to do a custom replacement of the "home" address when specifying where the qsub script should say it executes/errors should be placed.
This is great when you're creating the qsub script on a computer that doesn't share the same structure as the cluster (i.e. if you're like me and create the qsub on your laptop or you have a different cluster that you'll execute the file on). Its usage is pretty simple:
&lt;pre&gt;
$ generate_qsub cure_cancer.py --home_repl /home/visitors/adampah/
&lt;/pre&gt;
&lt;/li&gt;

&lt;li&gt;--execute
&lt;br&gt;
After generating the file it will automatically add the job to the queue. This option can only be used when you generate the file on the cluster. Also, please run it dry at least once if you're planning to batch submit a large number of jobs
&lt;/li&gt;

&lt;li&gt;
--temporary
&lt;br&gt;
Deletes the generated qsub file, can only be used with the execute option. For those that don't want file cruft.
&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;
So here is the code!

&lt;/p&gt;&lt;pre&gt;
#!/usr/bin/env python

'''
File: qsub_generator.py
Author: Adam Pah
Description: 
Generates a qsub file for a program to aid in job submission to 
a torque scheduler.

Usage is:
    qsub_generator.py program_file optional_arg1 optional_arg2 --kwargs '{"string":"dictionary","on":"command_line"}'
'''

#Standard path imports
from optparse import OptionParser
import os
import sys
import json
import random

#Non-standard imports

#Global directories and variables

qsub_text='''
#! /bin/bash
#PBS -d %s/
#PBS -e %s/%s.error
#PBS -o %s/%s.out
#PBS -N %s
#PBS -q low

%s
'''

def write_qsub_file(current_dir, wfname, wfpartial, commandLine, opt):
    '''
    Writes a qsub file given the generated contents and makes it executable
    '''
    wfile = open(wfname, 'w')
    print &amp;gt;&amp;gt; wfile, qsub_text % (current_dir,
                                 current_dir,
                                 wfpartial,
                                 current_dir,
                                 wfpartial,
                                 wfpartial,
                                 commandLine)
    wfile.close()
    #Change the permissions  
    os.chmod(wfname, 0755)
    #Do the hacking, execute and possibly delete the file
    if opt.execute:
        os.system('qsub %s' % wfname)
        if opt.temporary:
            os.system('rm %s' % wfname)

def generate_command_line(fname, fext, cmd_args, cmd_kwargs):
    '''
    Generates the bash script
    '''
    commandLine = '' 
    #Get the correct starting command
    if fext:
        if fext=='.py':
            commandLine += 'python '
        elif fext=='.sh':
            commandLine += 'bash '
        else:
            commandLine += './'
        #append the program name
        commandLine += fname + fext
    else:
        commandLine += './' + fname
    #Add the program arguments
    if cmd_args:
        commandLine += ' ' + ' '.join(cmd_args)
    if cmd_kwargs:
        for k,v in cmd_kwargs.items():
            commandLine += ' --'+str(k)+' '+str(v)
    return commandLine

def pull_current(opt):
    '''
    Pulls the current directory with home path substition if one is given in as opt.home_repl
    '''
    current_dir = os.getcwd()
    if opt.home_repl:
        if opt.home_repl != current_dir[:len(opt.home_repl)]:
            current_dir = os.path.join(opt.home_repl, current_dir.lstrip(os.environ['HOME']))
    return current_dir

def generate_savename(fname, fext):
    '''
    Generates the filename to save the qsub script to
    '''
    obstructed_filename = True
    while obstructed_filename:
        wfpartial = '%s_%d' % (fname, random.randint(0, 9999999))
        wfname = 'qsub_%s.sh' % wfpartial
        if not os.path.exists(wfname):
            obstructed_filename = False
    return wfname, wfpartial

def main(args, opt):
    '''
    Main function for calling.
    '''
    #Separate the program arguments from the input arguments
    cmd_args, cmd_kwargs = [], []
    if len(args)&amp;gt;1:
        cmd_args = args[1:]
    if opt.kwargs:
        cmd_kwargs = json.loads(opt.kwargs)
    #Get the current directory, modify it if a different home is set
    current_dir = pull_current(opt)
    #The executing scripts name
    fname, fext = os.path.splitext(os.path.basename(args[0]))
    wfname, wfpartial = generate_savename(fname, fext)
    commandLine = generate_command_line(fname, fext, cmd_args, cmd_kwargs)
    write_qsub_file(current_dir, wfname, wfpartial, commandLine, opt)

if __name__ == '__main__':
    usage = '''%prog qsub_generator.py program_file optional_arg1 optional_arg2 --kwargs '{"string":"dictionary","on":"command_line"}' '''
    parser = OptionParser(usage = usage)
    parser.add_option('--kwargs', action='store', default=None,
                      help="String dictionary of keyword arguments to submit to program")
    parser.add_option('--home_repl', action='store', default=None,
                      help="path to replace up to the user directory with")
    parser.add_option('--execute', action='store_true', default=False,
                      help="Submits qsub script immediately after creation. Only use if on cluster")
    parser.add_option('--temporary', action='store_true', default=False,
                      help="Removes the qsub script immediately after submitting with the --execute option")
    (opt, args) = parser.parse_args()
    #Check that temporary isn't used without execute
    if opt.temporary and not opt.execute:
        print &amp;gt;&amp;gt; sys.stderr, "--temporary option is meant to be used with --execute option.\n" + \
                             "Otherwise I would just generate and then delete files immediately, doing nothing.\n" + \
                             "Continuing, but not respecting your choice and deleting the file."
    #There must be an initial argument or else this ship is sunk
    if len(args)&amp;lt;1:
        m='''Must have a program name to use as the argument for the qsub file.\n''' + \
          '''If the file has no extension then it will be submitted as an executable.'''
        print &amp;gt;&amp;gt; sys.stderr, m
        sys.exit()
    main(args, opt)
&lt;/pre&gt;
&lt;/div&gt;</description><category>code</category><category>hpc</category><category>python</category><category>tutorial</category><guid>http://www.npcompleteheart.com/posts/generate-torque-submission-scripts.html</guid><pubDate>Sat, 07 Jun 2014 14:34:11 GMT</pubDate></item><item><title>Calculating a Gini Coefficient</title><link>http://www.npcompleteheart.com/posts/calculating-a-gini-coefficient.html</link><dc:creator>Adam Pah</dc:creator><description>&lt;div&gt;&lt;p&gt;
For whatever reason none of the python packages have a function to calculate the Gini coefficient, which is a fairly standard metric for inequality used in economics circles. I wrote this function but I wanted to explain if first.
&lt;/p&gt;

&lt;!-- TEASER_END --&gt;

&lt;h5&gt;A quick example&lt;/h5&gt;

&lt;p&gt;
Let's say that we have four individuals who are sharing 16 apples and we want to measure if the apples are equally distributed or not. If every individual has four apples then we have a list like so:
&lt;/p&gt;&lt;pre&gt;
apple_distribution = [4, 4, 4, 4]
&lt;/pre&gt;
and when we convert it to percentages (since the Gini is scaled from 0 to 100%) we have:
&lt;pre&gt;
apple_percs = [0.25, 0.25, 0.25, 0.25]
&lt;/pre&gt;
Now we just plot the cumulative of these points, which results in this graph
&lt;a style="text-align:center" href="http://s529.photobucket.com/user/damagedtoo/media/Photobucket%20Desktop%20-%20ariel/Website/958E5C04-7CE0-4951-B3DB-9BF18E146BBD_zpsb2igjg1j.jpg.html" target="_blank"&gt;&lt;img src="http://i529.photobucket.com/albums/dd335/damagedtoo/Photobucket%20Desktop%20-%20ariel/Website/958E5C04-7CE0-4951-B3DB-9BF18E146BBD_zpsb2igjg1j.jpg" border="0" alt=" photo 958E5C04-7CE0-4951-B3DB-9BF18E146BBD_zpsb2igjg1j.jpg"&gt;&lt;/a&gt;


&lt;p&gt;
Since the Gini is effectively the difference in area between the line of equality (y=x) and the area under the Lorenz curve (which is generated from our data), we need to calculate the area under the curve for our data. Taking each bar separately and looking at the dashed line from the picture, we see that there are two components to each bar, because only half of the area for the new value that we are add is under the curve. This means that the first part of the bar is the full area for the previous height, and half of the area for the new value that we add.
&lt;/p&gt;

&lt;h5&gt;The code&lt;/h5&gt;

&lt;p&gt;
The code is relatively simple, it takes in an arbitrary list of data and calculates the Gini coefficient. If the values are already calculated as frequencies then it proceeds, but if the values are raw counts then it converts them to frequencies (if the sum of the list is greater than 1.0 it performs this conversion). The only real error handling is if the sum of the values equals zero, since this introduces wonky behavior.
&lt;/p&gt;&lt;pre&gt;
def gini(data):
    ''' 
    Calculates the gini coefficient for a given dataset.
    input:
        data- list of values, either raw counts or frequencies. 
              Frequencies MUST sum to 1.0, otherwise will be transformed to frequencies
              If raw counts data will be transformed to frequencies.
    output:
        gini- float, from 0.0 to 1.0 (1.0 most likely never realized since it is
              only achieved in the limit)
    '''

    def _unit_area(height, value, width):
        ''' 
        Calculates a single bars area.
        Area is composed of two parts:
            The height of the bar up until that point
            The addition from the current value (calculated as a triangle)
        input:
            height: previous bar height or sum of values up to current value
            value: current value
            width: width of individual bar
        output:
            bar_area: area of current bar
        '''
        bar_area = (height * width) + ((value * width) / 2.) 
        return bar_area

    #Fair area will always be 0.5 when frequencies are used
    fair_area = 0.5 
    #Check that input data has non-zero values, if not throw an error
    datasum = float(sum(data))
    if datasum==0:
        import sys
        m = 'Data sum is 0.0.\nCannot calculate Gini coefficient for non-responsive population.' 
        print m
        sys.exit()
    #If data does not sum to 1.0 transform to frequencies
    if datasum!=1.0:
        data = [x/datasum for x in data]
    #Calculate the area under the curve for the current dataset
    data.sort()
    width = 1/float(len(data))
    height, area = 0.0, 0.0 
    for value in data:
        area += _unit_area(height, value, width)
        height += value
    #Calculate the gini
    gini = (fair_area-area)/fair_area
    return gini
&lt;/pre&gt;
&lt;/div&gt;</description><category>code</category><category>math</category><category>python</category><category>tutorial</category><guid>http://www.npcompleteheart.com/posts/calculating-a-gini-coefficient.html</guid><pubDate>Sun, 18 May 2014 14:33:15 GMT</pubDate></item><item><title>Make maps like a boss</title><link>http://www.npcompleteheart.com/posts/make-maps-like-a-boss.html</link><dc:creator>Adam Pah</dc:creator><description>&lt;div&gt;&lt;p&gt;
When I worked on metabolism I didn't have any needs to plot data on an actual geographic area (although I always wished some form of coordinate system existed like that for my data). But in my switch to working with health data I now have tons of spatial data. Moreover this spatial component is a fairly important effect on the patterns and behavior that I observe. 
&lt;/p&gt;

&lt;!-- TEASER_END --&gt;

&lt;p&gt;
So far I've been working with a GIS specialist (if you've looked at the maps in my small area estimation &lt;a href="http://npcompleteheart.com/post/ever-wanted-to-estimate-small-area-effects-in-heal/"&gt;post&lt;/a&gt; those are from him), but that's not an ideal situation when I only need a quick picture or to look at how data is distributed in space. When I needed to place data on a map previously I typically needed interactivity, so I would make a visualization with D3.js. But now I just need to make lots of maps quickly to just do exploratory analysis. Fortunately, I was looking for a solution right around the time the PyData conference was happening and I saw Rob Story's &lt;a href="https://speakerdeck.com/wrobstory/up-and-down-the-python-data-and-web-visualization-stack"&gt;presentation on  &lt;/a&gt;&lt;a href="http://nbviewer.ipython.org/gist/wrobstory/1eb8cb704a52d18b9ee8/Up%20and%20Down%20PyData%202014.ipynb"&gt;Up and Down the Python Data and Web Visualization Stack"&lt;/a&gt;. This talk turned me onto Folium, especially after seeing it work with iPython notebook (which has become one of my favorite workflow tools).
&lt;/p&gt;

&lt;h4&gt;Making maps with Folium&lt;/h4&gt;

&lt;p&gt;
...is pretty damn easy. If you follow the examples on the Gitub &lt;a href="https://github.com/wrobstory/folium"&gt;page&lt;/a&gt; with the example data you will be making maps in no time. Now comes the fun part, making maps with our own data!
&lt;/p&gt;

&lt;h5&gt;Step 1. Obtain Shapefile data&lt;/h5&gt;

&lt;p&gt;
To plot our own data we will need to get a GeoJSON or TopoJSON file that contains the path information about how to draw boundaries on the map. Unfortunately, the predominant file type for geographic data is a shapefile and geojson or topojson files are pretty scarce on the web. For the USA though we can easily get maps at all geographic resolutions from the &lt;a href="http://www.census.gov/geo/maps-data/data/tiger-line.html"&gt;census/TIGER&lt;/a&gt; website.
&lt;/p&gt;

&lt;h5&gt;Step 2. Converting from shapefile-&amp;gt;geojson-&amp;gt;topojson&lt;/h5&gt;

&lt;p&gt;
Since the open source world is rocking geojson or topojson files we just need to convert our new shapefile over. To do this we will need to install ogr2ogr (which is a part of the GDAL package) and topojson. On OSX this can be accomplished with homebrew and node.js very simply by:
&lt;br&gt;
&lt;/p&gt;&lt;pre&gt;
$ brew install gdal
$ brew install node
$ node install -g topojson
&lt;/pre&gt;


&lt;p&gt;
For my needs I needed to plot data on Illinois zip codes so I downloaded the ZCTA (zip code tabulation area, not the exact same as zipcodes but close enough for me) file for Illinois. Proceeding with this file we first convert the shapefile to a geojson like so:
&lt;br&gt;
&lt;/p&gt;&lt;pre&gt;
$ ogr2ogr -f illinois.json tl_2010_17_zcta510.shp
&lt;/pre&gt;
&lt;br&gt;
Next we convert the geojson to topojson. The only additional wrinkle from the geojson conversion is that we need to set the ID on each one of the areas (which is the same ID that we'll be binding to when we add data to the map). We can open up the geojson file and look at any of the "properties" entries to find the name of the needed key from the file. For the ZCTA file this key is "ZCTA5CE10". With that we convert the geojson to a topojson setting the ID and adding a zipcode property
&lt;br&gt;
&lt;pre&gt;
$ topojson --id-property ZCTA5CE10 -p zipcode=ZCTA5CE10 illinois.json -o illinois_topo.json
&lt;/pre&gt;


&lt;h5&gt;Step 3. Make one sweet map&lt;/h5&gt;

&lt;p&gt;This step is pretty simple. Take our new topojson file and the csv of data we have keyed on zipcode and throw it over the map like:
&lt;br&gt;
&lt;/p&gt;&lt;pre&gt;
import folium
import pandas as pd
import numpy as np
&lt;p&gt;df = pd.read(csv_file)
bins = list(np.linspace(df['feature'].min(), df['feature'].max(), 6))
city_map = folium.Map(location=[41.8819, -87.6278], width='700', tiles='Stamen Toner',  zoom_start=10)
city_map.geo_json(geo_path='illinois_topo.json', topojson='objects.illinois',
                             data=df, 
                             threshold_scale=bins,
                             columns=['zipcode', 'feature'], 
                             key_on='feature.id',
                             fill_opacity=1, 
                             line_opacity=1,
                             fill_color='PuBuGn',
                             reset=True)
city_map.create_map('city.html')
&lt;/p&gt;&lt;/pre&gt;
&lt;br&gt;
and now we have a map which is embedded below!  The official library as it stands only has support for up to six colors. This wasn't enough for me, so I have a fork of it with additional color support added on my &lt;a href="https://github.com/adamrpah/folium"&gt;github&lt;/a&gt; page that anyone is welcome to (it also has diverging color scales!)
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;pt src="http://d3js.org/queue.v1.min.js"&amp;gt;
&lt;script src="http://cdn.leafletjs.com/leaflet-0.7/leaflet.js"&gt;&lt;/script&gt;
&lt;script src="http://d3js.org/topojson.v1.min.js"&gt;&lt;/script&gt;
&lt;link rel="stylesheet" href="http://cdn.leafletjs.com/leaflet-0.7/leaflet.css"&gt;&lt;/p&gt;
&lt;style&gt;

&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;legend&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="kt"&gt;px&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="kt"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;font&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="kt"&gt;px&lt;/span&gt; &lt;span class="kc"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;0.8&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="kt"&gt;px&lt;/span&gt; &lt;span class="nb"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;0.2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="kt"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;key&lt;/span&gt; &lt;span class="nt"&gt;path&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;/style&gt;

&lt;div id="map" style="width: 700px; height: 500px"&gt;&lt;/div&gt;

&lt;script&gt;

&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;  queue()
      .defer(d3.json, &amp;quot;/media/d3-files/asthma.json&amp;quot;)
      .defer(d3.json, &amp;quot;/media/d3-files/topo_illinois.json&amp;quot;)
      .await(makeMap)

  function makeMap(error, data_1, tjson_1) {

      topo_1 = topojson.feature(tjson_1, tjson_1.objects.illinois);




      function matchKey(datapoint, key_variable){
          if (typeof key_variable[0][datapoint] === &amp;#39;undefined&amp;#39;) {
              return null;
          }
          else {
              return parseFloat(key_variable[0][datapoint]);
          };
      };


      var color = d3.scale.threshold()
          .domain([0.0, 89.743589743589737, 179.48717948717947, 269.23076923076923, 358.97435897435895, 448.71794871794867, 538.46153846153845, 628.20512820512818, 717.9487179487179, 807.69230769230762, 897.43589743589735, 987.17948717948707, 1076.9230769230769, 1166.6666666666665, 1256.4102564102564, 1346.153846153846, 1435.8974358974358, 1525.6410256410256, 1615.3846153846152, 1705.1282051282051, 1794.8717948717947, 1884.6153846153845, 1974.3589743589741, 2064.102564102564, 2153.8461538461538, 2243.5897435897436, 2333.333333333333, 2423.0769230769229, 2512.8205128205127, 2602.5641025641025, 2692.3076923076919, 2782.0512820512818, 2871.7948717948716, 2961.5384615384614, 3051.2820512820513, 3141.0256410256407, 3230.7692307692305, 3320.5128205128203, 3410.2564102564102, 3500.0])
          .range([&amp;#39;#f6eff7&amp;#39;, &amp;#39;#f0eaf4&amp;#39;, &amp;#39;#eae5f1&amp;#39;, &amp;#39;#e4e1ef&amp;#39;, &amp;#39;#dedcec&amp;#39;, &amp;#39;#d8d7e9&amp;#39;, &amp;#39;#d2d3e7&amp;#39;, &amp;#39;#cccfe5&amp;#39;, &amp;#39;#c6cce3&amp;#39;, &amp;#39;#bfc9e1&amp;#39;, &amp;#39;#b9c6e0&amp;#39;, &amp;#39;#b2c3de&amp;#39;, &amp;#39;#acc0dc&amp;#39;, &amp;#39;#a6bddb&amp;#39;, &amp;#39;#9cb9d9&amp;#39;, &amp;#39;#92b6d7&amp;#39;, &amp;#39;#88b3d5&amp;#39;, &amp;#39;#7fb0d3&amp;#39;, &amp;#39;#75add1&amp;#39;, &amp;#39;#6baacf&amp;#39;, &amp;#39;#63a7cd&amp;#39;, &amp;#39;#5ba3cb&amp;#39;, &amp;#39;#549fc9&amp;#39;, &amp;#39;#4c9bc6&amp;#39;, &amp;#39;#4597c4&amp;#39;, &amp;#39;#3d93c2&amp;#39;, &amp;#39;#3690c0&amp;#39;, &amp;#39;#2e8db7&amp;#39;, &amp;#39;#268baf&amp;#39;, &amp;#39;#1e89a7&amp;#39;, &amp;#39;#16869e&amp;#39;, &amp;#39;#0e8496&amp;#39;, &amp;#39;#06828e&amp;#39;, &amp;#39;#017e85&amp;#39;, &amp;#39;#017a7c&amp;#39;, &amp;#39;#017573&amp;#39;, &amp;#39;#01716a&amp;#39;, &amp;#39;#016c61&amp;#39;, &amp;#39;#016858&amp;#39;, &amp;#39;#016450&amp;#39;]);


      var map = L.map(&amp;#39;map&amp;#39;).setView([41.8819, -87.6278], 10);

      L.tileLayer(&amp;#39;http://{s}.tile.stamen.com/toner/{z}/{x}/{y}.jpg&amp;#39;, {
          maxZoom: 18,
          attribution: &amp;#39;Map tiles by &amp;lt;a href=&amp;quot;http://stamen.com&amp;quot;&amp;gt;Stamen Design&amp;lt;/a&amp;gt;, under &amp;lt;a href=&amp;quot;http://creativecommons.org/licenses/by/3.0&amp;quot;&amp;gt;CC BY 3.0&amp;lt;/a&amp;gt;. Data by &amp;lt;a href=&amp;quot;http://openstreetmap.org&amp;quot;&amp;gt;OpenStreetMap&amp;lt;/a&amp;gt;, under &amp;lt;a href=&amp;quot;http://creativecommons.org/licenses/by-sa/3.0&amp;quot;&amp;gt;CC BY SA&amp;lt;/a&amp;gt;.&amp;#39;
      }).addTo(map);










      function style_1(feature) {
return {
    fillColor: color(matchKey(feature.id, data_1)),
    weight: 1,
    opacity: 1,
    color: &amp;#39;black&amp;#39;,
    fillOpacity: 1
};
&lt;/pre&gt;


&lt;p&gt;}&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;      &lt;span class="nt"&gt;gJson_layer_1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nt"&gt;L&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;geoJson&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;topo_1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;style&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;style_1&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;addTo&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;map&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;



          &lt;span class="nt"&gt;var&lt;/span&gt; &lt;span class="nt"&gt;legend&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nt"&gt;L&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;control&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;topright&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

&lt;span class="nt"&gt;legend&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;onAdd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nt"&gt;function&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;map&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;var&lt;/span&gt; &lt;span class="err"&gt;div&lt;/span&gt; &lt;span class="err"&gt;=&lt;/span&gt; &lt;span class="err"&gt;L.DomUtil.create(&amp;#39;div&amp;#39;,&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;legend&amp;#39;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="err"&gt;return&lt;/span&gt; &lt;span class="err"&gt;div&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="nt"&gt;legend&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;addTo&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;map&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

&lt;span class="nt"&gt;var&lt;/span&gt; &lt;span class="nt"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nt"&gt;d3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;linear&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;domain&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3850&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;range&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

&lt;span class="nt"&gt;var&lt;/span&gt; &lt;span class="nt"&gt;xAxis&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nt"&gt;d3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;svg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;axis&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;scale&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;x&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;orient&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;top&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;tickSize&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;tickValues&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;358.97435897435895&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;717.9487179487179&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1076.9230769230769&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1435.8974358974358&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1794.8717948717947&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;2153.8461538461538&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;2512.8205128205127&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;2871.7948717948716&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;3230.7692307692305&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

&lt;span class="nt"&gt;var&lt;/span&gt; &lt;span class="nt"&gt;svg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nt"&gt;d3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;select&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;.legend.leaflet-control&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;append&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;svg&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;attr&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;legend&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;attr&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;width&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;450&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;attr&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;height&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;40&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

&lt;span class="nt"&gt;var&lt;/span&gt; &lt;span class="nt"&gt;g&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nt"&gt;svg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;append&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;g&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;attr&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;class&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;key&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;attr&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;transform&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;translate(25,16)&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

&lt;span class="nt"&gt;g&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;selectAll&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;rect&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;data&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;color&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;range&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;map&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;function&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;d&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;i&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="err"&gt;return&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;x0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;color&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;domain&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;range&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;x1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="kc"&gt;color&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;domain&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;color&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;domain&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;range&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;enter&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;append&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;rect&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;attr&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;height&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;10&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;attr&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;x&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;function&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;d&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="err"&gt;return&lt;/span&gt; &lt;span class="err"&gt;d.x0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;attr&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;width&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;function&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;d&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="err"&gt;return&lt;/span&gt; &lt;span class="err"&gt;d.x1&lt;/span&gt; &lt;span class="err"&gt;-&lt;/span&gt; &lt;span class="err"&gt;d.x0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;style&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;fill&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;function&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;d&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="err"&gt;return&lt;/span&gt; &lt;span class="err"&gt;d.z&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

&lt;span class="nt"&gt;g&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;call&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;xAxis&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;append&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;text&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;attr&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;class&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;caption&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;attr&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;y&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;21&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;text&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Number of Asthma Cases, 2006-2012&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;


  &lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/pre&gt;


&lt;/script&gt;&lt;/div&gt;</description><category>code</category><category>gis</category><category>python</category><category>tutorial</category><category>web</category><guid>http://www.npcompleteheart.com/posts/make-maps-like-a-boss.html</guid><pubDate>Sat, 17 May 2014 13:05:40 GMT</pubDate></item><item><title>Pandas + Matplotlib + Looking pretty good</title><link>http://www.npcompleteheart.com/posts/pandas-%2B-matplotlib-%2B-looking-pretty-good.html</link><dc:creator>Adam Pah</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;img alt="pandas and matplotlib" src="http://www.npcompleteheart.com/images/pandas_matplotlib.png"&gt;&lt;/p&gt;
&lt;p&gt;
Typically matplotlib produces plots that look, well, horrible. This can be a little bit of a pain, especially because I've switched my workflow to lean heavily on ipython notebook to maintain a lab notebook. This means removing xmgrace from my workflow except for manuscript figure preparation since it won't show up inline unless I make the plot, save it as a png, move the file to the notebook directory, and then link the file in a text section. Not exactly user friendly or an improvement to my workflow. Unfortunately, just because I want to make plots in python for exploration doesn't mean that I can tolerate ugly graphs and that godforsaken default font.
&lt;/p&gt;

&lt;!-- TEASER_END --&gt;

&lt;p&gt;
So far I have two solutions and I'm quite happy with both (although neither one fixes the fact that matplotlib somehow renders an eps and makes it scale like a png). The first one has been to use prettyplotlib, which looks nice but is its own library and inherits from matplotlib. It sounds like this will eventually get merged as a style file into matplotlib in the future, which is great. The other way I describe below.
&lt;/p&gt;

&lt;h4&gt;mpltools with "ggplot"&lt;/h4&gt;

&lt;p&gt;
I'll be honest, I really do like ggplot in R but I don't think that the default grey background is the best for paper figures (looks great on the web though). Using mpltools you can easily change the style of plots using a simple style command like:
&lt;/p&gt;&lt;pre&gt;
from mpltools import style
style.user("ggplot")
&lt;/pre&gt;
Even better, this is now in the matplotlib master branch!


&lt;p&gt;
So now the best part is that it's easy to get generated using a default matplotlib command and have it look pretty decent. This is especially important when using pandas, because now I can just:
&lt;/p&gt;&lt;pre&gt;
import pandas as pd
df = pd.read_csv('age_data.csv')
df.age.hist(label='Age',  color='steelblue')
plt.ylabel('Count')
plt.legend()
&lt;/pre&gt;
and get the result below.
&lt;/div&gt;</description><category>code</category><category>matplotlib</category><category>pandas</category><category>plots</category><category>python</category><category>tutorial</category><guid>http://www.npcompleteheart.com/posts/pandas-%2B-matplotlib-%2B-looking-pretty-good.html</guid><pubDate>Mon, 31 Mar 2014 12:59:11 GMT</pubDate></item><item><title>Working with Windows</title><link>http://www.npcompleteheart.com/posts/working-with-windows.html</link><dc:creator>Adam Pah</dc:creator><description>&lt;div&gt;&lt;p&gt;
So, you're working with windows, either by choice (wait. what?) or force (gah, somebody else making computer purchase decisions), and you're a programmer. Not just any programmer, a terminal acolyte that's chosen sides on the great vi/emacs holy war. I'll be blunt, that first sign-on is &lt;strong&gt;painful&lt;/strong&gt;. But hey, the world keeps turning and it's best to stay on top of technology. Here's how I've adjusted, with the all the steps (minus getting vim happy) coming from my Windows trailblazing amigo &lt;a href="https://twitter.com/dan_mcclary%E2%80%8E"&gt;Dan McClary&lt;/a&gt;.
&lt;/p&gt;

&lt;!-- TEASER_END --&gt;

&lt;h4&gt;First things, get a dang terminal&lt;/h4&gt;

&lt;p&gt;
And not just powershell, in no way does that even come close to being correct.  What you'll need to get is &lt;a href="http://www.npcompleteheart.com/posts/www.cygwin.com"&gt;Cygwin&lt;/a&gt;.  It will download and you'll be left with a setup.exe file that will install it for you.  Now here is where things get weird coming from a Linux standpoint, that setup.exe file combined with the folder it makes for the source from a mirror is (essentially) the package manager for Cygwin. &lt;strong&gt;Weird&lt;/strong&gt;. So if you are like me and like clean folders, don't delete either of them.  You'll just have to download them again later when you need to change what packages to install.
&lt;/p&gt;

&lt;p&gt;
Now, let's pick what to install.  I went through this process maybe three times, each time missing packages that I needed.  So I did this really dumbly, I installed everything &lt;strong&gt;except&lt;/strong&gt; for python. Whatever you do, don't install python (for our purposes). We're going to get python from a different source later and this one will actually play nicely outside of Cygwin.  That's important just to hedge our bets really.  A lot of IDEs and other software will expect that if we have python it came from a general installation and not Cygwin, so they will not find anything if they go looking for it.  Why not just install both?  Because less headaches are good.
&lt;/p&gt;

&lt;h4&gt;Now let's get a prettier terminal&lt;/h4&gt;

&lt;p&gt;
Why are we getting a different terminal? Because Cygwin is about as feature rich as a a piece of coal (no tabs, no nothing, but at least it exists!).
With windows there is essentially only one option, &lt;a href="http://sourceforge.net/projects/console/"&gt;Console2&lt;/a&gt;.  I'm not about to say I'm in love with it, because I'm really not (you'll see why in the vim section), but it's much better than Cygwin. It has tabs, you can change what it looks, all the important basics.  Just download and place the exe somewhere, it doesn't even install. Open it up and don't be afraid, by default it goes directly to the windows command line. Just follow &lt;a href="http://blog.quibb.org/2011/11/configuring-console2-with-cygwin/"&gt;this&lt;/a&gt; to set up a shell with cygwin.
&lt;/p&gt;

&lt;h4&gt;Finally, let's get la lingua python&lt;/h4&gt;

&lt;p&gt;
So we didn't get python from Cygwin so that it can be used all over Windows, so now let's get the official installer from &lt;a href="http://www.python.org/getit/windows/"&gt;Python&lt;/a&gt;. If we were on LInux or OS X we would start using pip to install the rest of the packages (highly recommended instead of using ports on OS X), but that really isn't the way to go on WIndows with the scientific packages that are very dependent on being compiled correctly. We can easily get all of those packages from this &lt;a href="http://www.lfd.uci.edu/~gohlke/pythonlibs/"&gt;site&lt;/a&gt;. My unofficial list of packages is: numpy, scipy, sympy pandas, pandasql, and pip. All good gets. The rest can be pretty easily installed with pip.
&lt;/p&gt;

&lt;h4&gt;Can we edit things yet?&lt;/h4&gt;

&lt;p&gt;
In vim. Of course, because everyone &lt;strong&gt;loves&lt;/strong&gt; to edit in vim. Vim is of course in Cygwin, which means that it'll also be Console2 and it can be used their right away. It even takes in the vimrc and .vim/ from our default user directory in Cygwin. But there's just one massive problem.
&lt;/p&gt;

&lt;p&gt;
You use NERDTree, have multiple buffers open in a single window, and use multiple tabs, right? It starts with the key command &lt;ctrl w&gt; then the directional letter of the buffer to move to. In Windows, &lt;ctrl w&gt; closes the window and both Cygwin and Console2 respect that. So every time I tried to move between buffers my entire tab full of work was unceremoniously and immediately closed. Big damn problem, but not enough to tell anyone else I knew and get derided for not using emacs.
&lt;/ctrl&gt;&lt;/ctrl&gt;&lt;/p&gt;

&lt;p&gt;
We have to look deeper and there is a really simple answer. Install &lt;a href="http://www.vim.org/download.php#pc"&gt;gVim&lt;/a&gt;.  Yes, it's not on the command line, but Console2 isn't perfect anyways. We'l actually even want to use gVim instead of the Vim app because gVim can be fully maximized and Vim can't be for some reason. Now, here was the weird thing that shook me up. These apps use your Windows home directory ("C:/Users/[USERNAME]/") instead of the Cygwin home directory, which is easy enough to solve. Just copy over our configuration from the Cygwin home directory and start the app back up again. But gVim still wouldn't load modules using pathogen for me. Turns out that in windows the .vim/ directory isn't called that, but is instead called vimfiles/.  Just renaming the directory takes care of everything and we have an awesome working Vim!
&lt;/p&gt;

&lt;h4&gt;Now let's get spoiled&lt;/h4&gt;

&lt;p&gt;
Task launcher and multiple desktops. The task launcher is essential, I'm using &lt;a href="http://www.npcompleteheart.com/posts/www.launchy.net/%E2%80%8E"&gt;Launchy&lt;/a&gt;. It really only does applications (so it won't pick up Console2) but it is responsive.  I tried others but they brought my underpowered desktop to its knees. I also used Dexpot to get multiple workspaces, but it is really just a hack in Windows.  It's nice to have, but it still doesn't feel like it does on OS X
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Well, that's it.&lt;/strong&gt; Hope that's enough to get you going and happy Windows'ing.&lt;/p&gt;&lt;/div&gt;</description><category>productivity</category><category>tutorial</category><category>windows</category><guid>http://www.npcompleteheart.com/posts/working-with-windows.html</guid><pubDate>Mon, 10 Jun 2013 12:41:33 GMT</pubDate></item><item><title>Starting with Mongo, some Dos and Don'ts</title><link>http://www.npcompleteheart.com/posts/starting-with-mongo-some-dos-and-donts.html</link><dc:creator>Adam Pah</dc:creator><description>&lt;div&gt;&lt;p&gt;
Some backstory.  I think I first started talking about MongoDB in earnest maybe five months ago in my research lab. After having one person convert with a big project and some successful presentations (which weren't even done by me!) research has finally peaked.  Now that everyone is converting, people are going through the same growing pains I had when I first started. Instead of forgetting these nuggets of information again I wanted to put them done in text.
&lt;/p&gt;

&lt;!-- TEASER_END --&gt;

&lt;h3&gt;Wait, why MongoDB? I heard about (blank)! ...or Something new? Bah... Screw it.&lt;/h3&gt;

&lt;p&gt;
I'm just going to be blunt, I am not the person to have an argument about SQL versus NoSQL or NoSQL option a vs NoSQL option b. There are tons of software technologies, both old and new, and I think that whatever fits your specific use case for a single problem is what you should do. To me, that means that if you are trying to run a High Frequency Trading firm you have a really expensive SQL server, if you are maintaining secondary indices you have Redis, or if you have tons of database document records you use MongoDB or something close to it. My vote is for using whatever software best fits the problem at hand.  With that said though, I am going to approach the basics of MongoDB coming from a comparison to SQL.
&lt;/p&gt;

&lt;h3&gt;Some Mongo Basics&lt;/h3&gt;

&lt;p&gt;
A mongo install will/can have many databases inside of it. Each database will/can in turn host many collections. Each collection hosts a number of records which are termed BSONs (Binary JSON) which are similar to JSONs (JavaScript Object Notation) which are similar to dictionaries in a programming language like Python. Like every other dictionary, a BSON will be composed of keys and values. To put this in SQL terms, the column headings would be keys and the values in a single row would be the values. Each row would be a separate record.
&lt;/p&gt;

&lt;p&gt;
At this point, you may have already noticed something. "But wait, aren't you duplicating the entry for those keys? Isn't that a waste of space?'
&lt;br&gt;
The answer is yes, that is inefficient in terms of disk space.  However, it is not inefficient in terms of querying.  Every time I launch a search for a record I will want to know what are the fields that the record has and access them. This is especially true because each record doesn't need to have the same schema. The real answer in all of this, is to not worry about space inefficiencies. Horizontal scaling of MongoDB (spreading it over multiple computers to increase space) is easily done.  It's a little bit of a paradigm shift, but let's just roll with it.
&lt;/p&gt;

&lt;p&gt;
For the rest of this walkthrough, when I talk about interacting with the database I'll be referring to it as if we are using python with PyMongo to access the database. You could just execute commands with the Mongo shell but we'll work with it this way.
&lt;/p&gt;

&lt;h3&gt;What is my MongoDB workflow?&lt;/h3&gt;

&lt;p&gt;
First off, databases and collections in MongoDB are lazily created.  That means that when you tell mongo that you are going to put something into a database or collection that doesn't exist, it creates it! It also means that just telling it to open a database doesn't create it.  MongoDB won't actually create the database until there is a BSON in there.
&lt;/p&gt;

&lt;p&gt;
So let's make the worst address book as an example.  We'll assume that we have MongoDB running on the computer where we are typing this code. From the interactive python shell, it will look something like this;

&lt;/p&gt;&lt;pre class="prettyprint lang-python"&gt;
import pymongo
client = pymongo.MongoClient()
db = client.address_book
db.friends.insert({'name': 'John'})
&amp;gt; ObjectId('5183fb1aacc1453c8e5258f4')
&lt;/pre&gt;
&lt;br&gt;

What we have done here is:
&lt;ul&gt;
&lt;li&gt; Imported pymongo &lt;/li&gt;
&lt;li&gt; Established a connection to MongoDB&lt;/li&gt;
&lt;li&gt; Created a database called 'address_book'.  After this first time, we will not be creating but just calling it because it will already exist&lt;/li&gt;
&lt;li&gt; Inserted an entry for our friend 'John' into the collection 'friends' inside the database 'address_book'.  Mongo responds by telling us what the ObjectId it has assigned to it is. &lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;
This ObjectId is uniquely created for each document and this is how Mongo keeps track of the documents on its own. It is actually quite important too. Let's find our document in the database and look at how Mongo keeps it.

&lt;/p&gt;&lt;pre class="prettyprint lang-python"&gt;
db.friends.find_one()
&amp;gt; {u'_id': ObjectId('5183fb1aacc1453c8e5258f4'), u'name': u'John'}
&lt;/pre&gt;
&lt;br&gt;

We see here that the ObjectId is the value of the field '_id'.  This is actually important: &lt;b&gt;Mongo reserves the value 'id'/'_id' to itself.&lt;/b&gt;  You can actually create an 'id' field of your own, but you won't be able to index it (see the next section for why that is important).  It's best to be more expressive in your key naming anyways, given that we can have tons of documents of any type in a collection.  In this example, we will give our documents a 'friend_id' to uniquely identify them.


&lt;p&gt;
Adding our friend_id is relatively easy.  We just get the corresponding record, modify it, and then save it back in the database.  This is done as:

&lt;/p&gt;&lt;pre class="prettyprint lang-python"&gt;
friend_bson = db.friends.find({'name': 'John'})[0]
friend_bson['friend_id'] = 1
db.friends.save(friend_bson)
db.friends.find_one()
&amp;gt; {u'friend_id': 1, u'_id': ObjectId('5183fb1aacc1453c8e5258f4'), u'name': u'John'}
&lt;/pre&gt;
&lt;br&gt;

We find the document we want (note that we put an index on the find because without it friend_bson would be the cursor to the database query), add the new field, and then save it.  MongoDB sees that it has an ObjectId already and matches it to the document in the database. Pretty simple right?  Now just make sure not to mess with an ObjectId. 


&lt;h3&gt;Why is MongoDB so slow after I put in a bunch of records?&lt;/h3&gt;

&lt;p&gt;
So let's continue with our example and say that you have created a database and populated it with thousands of BSONs that catalog your friends' information (we all have thousands of friends after Facebook right?). But now you want to find a specific friend and view their information.  We would launch a query like (note that 'find_one()' is a pymongo specific query):

&lt;/p&gt;&lt;pre class="prettyprint lang-python"&gt;
friend = db.friends.find({'name': 'John'})
print friend
&amp;gt; {'_id': ObjectId(88719352718910), 'name': 'John'}
&lt;/pre&gt;
&lt;br&gt;

This will return the document of information that we have for our friend John. Now this request may take a bit of time, if we haven't touched our database at all.  That is because without telling Mongo additional fields that we want it to index, it will only index the "_id" field. This means that a query on any other field will send Mongo searching through all of the records one by one until it finds yours.


&lt;p&gt;
This is actually a pretty easy problem to fix.  All we have to do is tell Mongo to index on the field that we want to query on.  We do this in pymongo as:

&lt;/p&gt;&lt;pre class="prettyprint lang-python"&gt;
db.friends.ensure_index('name')
&lt;/pre&gt;
&lt;br&gt;

I like to actually put this line of code at the end of my initial data import script.  That way I don't forget to do it and have slow query times.


&lt;p&gt;
Now you might ask why not just index all of the fields then?  The way that indexing in Mongo works is that it keeps a tree of all the values for an indexed field in memory. That way when you query it only has to traverse the tree to find your document.  If you index all of the fields you run the risk of having so many trees that are so large that exceeds the available memory of the computer.  That will send your performance right back down. So it's best to only index the fields that you will need to use.
&lt;/p&gt;

&lt;h3&gt;Many-to-Many Relationships&lt;/h3&gt;

&lt;p&gt;
One of the questions coming from SQL is how do I manage one-to-many or many-to-many relationships without tables? This is a good question and I don't believe that there is a set in stone answer yet.  Really it will come down to your use case. There are three ways that we can handle this: (1) document mapping, (2) embedded lists, and (3) embedded documents.
&lt;/p&gt;

&lt;p&gt;
In this example, we will say that we want to start adding where our friends work.  We will also assume that our friends are industrious and have more than one job.  So for example, we'll say that John works at both Northwestern University and MegaCorp. In this instance, we already have our friend John in the database.  Let's assume that we have already added a document for Northwestern University and MegaCorp into the database also.
&lt;/p&gt;

&lt;h4&gt;Document Mapping&lt;/h4&gt;

&lt;p&gt;
This is the most SQL-like manner.  We will create another document that has two fields, one that corresponds to John and another that corresponds to the corporation. That means we would do this:

&lt;/p&gt;&lt;pre class="prettyprint lang-python"&gt;
relationship1 = {'person_name' : 'John', 'corporation_name' : 'Northwestern University', 'type': 'relationship'})
relationship2 = {'person_name': 'John', 'corporation_name': 'MegaCorp', 'type':'relationship'})
db.friends.insert(relationship1)
db.friends.insert(relationship2)
&lt;/pre&gt;
&lt;br&gt;

Now for a random document to find their workplace we need to do:
&lt;pre class="prettyprint lang-python"&gt;
for document in db.friends.find('friend_id': {'$exists' : 'true'}}):
    corporations = []
    for relationship_record in db.friends.find({'type': 'relationship', 'person_name': document['name']}):
        corporations.append(relationship_record['corporation_name'])
print corporations
&amp;gt; ['Northwestern University', 'MegaCorp']
&lt;/pre&gt;
&lt;br&gt;

This method will require two queries to the database and multiple indices to ensure speed. If we didn't put the descriptive variable we want in the relationship record (which will be likely) then it would be three queries because we have to make another request to get the company record.  This will be the slowest option.


&lt;h4&gt;Embedded Lists&lt;/h4&gt;

&lt;p&gt;
Using this method we create a field in the person document called 'corporations' that is a list.  We then populate the list with the identifiers for our corporations. We will also do this to our corporation documents but in reverse, adding a field 'employees' that is a list of the people that work there. Given this set up our workflow would be:

&lt;/p&gt;&lt;pre class="prettyprint lang-python"&gt;
for document in db.friends.find('friend_id': {'$exists' : 'true'}}):
    print document['corporations']
&amp;gt; ['Northwestern University', 'MegaCorp']
&lt;/pre&gt;
&lt;br&gt;

In this set up, we only need one query.  If we didn't store the name of the corporation but instead the ObjectId we would have to query twice, once to get people and a second time to get corporations.  In any case, it would still be faster than the relationship mapping method.


&lt;h4&gt;Embedded Documents&lt;/h4&gt;

&lt;p&gt;
This method is an alternative take on embedded lists.  The only difference is, instead of storing a value to identify the associated company with we have the entire company document in the person document. This means that there is no need to have company records at all.  However, that means that the company information will be replicated separately in each one of the person documents (remember how I told you to not worry about disk space? This is the time).
&lt;/p&gt;

&lt;h4&gt;Choosing between them&lt;/h4&gt;

&lt;p&gt;
The Embedded Documents method can be a boon to speed or it can be a real pain and it really comes down to our usage.  For something like our address book, it makes more sense to use embedded lists.  That is because if we need to change a corporation (or person record) all we have is a pointer stored to it so there's no need to change it in more than one place.  If we use the embedded documents method, this would be a real pain.  Say for example that we added the address to a corporation, we would have to go through every person, see if they have that corporation listed, and change the address.  It's a time waste and overly redundant.
&lt;/p&gt;

&lt;p&gt;
However, on this blog I have each post as a document and any comments on that post are embedded into that post document. This makes sense, because whenever I want to load a blog post I also want the associated comments.  This makes it so that all the information I need is in one query.  Even better, a comment on one post doesn't apply to another so there isn't any real duplication.
&lt;/p&gt;

&lt;p&gt;
As a quick rule, I would say that the method that you use should be based on a specific use case.  If you have unique documents and a one-to-many relationship (like this blog and comments) then the Embedded Documents method makes sense.  If you have non-unique documents and relationships or many-to-many relationships then the Embedded Lists method will work better.  I honestly can't think of a situation where you would want to map the relationships in a SQL-like manner, but I reserve the right to be proven wrong.
&lt;/p&gt;

&lt;p&gt;
...and with that, good luck and happy Mongo'ing!
&lt;/p&gt;&lt;/div&gt;</description><category>mongodb</category><category>tutorial</category><guid>http://www.npcompleteheart.com/posts/starting-with-mongo-some-dos-and-donts.html</guid><pubDate>Thu, 02 May 2013 12:38:44 GMT</pubDate></item><item><title>What is the structure of my Django app?</title><link>http://www.npcompleteheart.com/posts/what-is-the-structure-of-my-django-app.html</link><dc:creator>Adam Pah</dc:creator><description>&lt;div&gt;&lt;p&gt;
This post is supposed to carry on from &lt;a href="http://www.npcompleteheart.com/post/django-nonrel-mongodb-mongohq-heroku/"&gt; setting up a Django app on Heroku with MongoDB &lt;/a&gt; and help fill in a hole from the MongoDB &lt;a href="http://docs.mongodb.org/manual/tutorial/write-a-tumblelog-application-with-django-mongodb-engine/"&gt; Tumblelog &lt;/a&gt; tutorial.  The biggest question is, what is my directory structure?  The tutorial jumps around a lot, assuming that you already know where everything should go.  So let's tackle that first.
&lt;/p&gt;

&lt;!-- TEASER_END --&gt;

&lt;h3&gt;What is the structure of my Django project?&lt;/h3&gt;

&lt;p&gt;
This is probably the only part that most people starting out that are familiar with programming but not Django or the web will need.  Here is what your directory structure for a Tumblelog should look like:

&lt;/p&gt;&lt;pre class="prettyprint lang-bash"&gt;
djangoapp/
|- .git/
|- .gitignore
|- venv/
|- requirements.txt
|- Procfile
|- djangoapp/
    |- __init__.py
    |- urls.py
    |- settings.py
    |- manage.py
    |- tumblelog/
        |- models.py
        |- views.py
        |- tests.py
        |- forms.py
|- media/
    |- robots.txt
    |- js/
    |- img/
    |- css/
|- templates/
    |- base.html
    |- _form.html
    |- tumblelog/
        |- post_detail.html
        |- post_list.html
&lt;/pre&gt;

If you fit that first description then this is all you probably wanted, so happy web app'ing!



&lt;h3&gt;How do I configure it?&lt;/h3&gt;

&lt;p&gt;
So the only two directories really left are the media and template directories.  Media contains pictures (in the img/ folder), javascript (I would suggest that would be applied on every page, in the js/ folder), and site-wide css to style it (you guessed it, in the css/ folder).  You can make a directory in here and use it in an ad-hoc fashion too, before I added a javascript field in my Post model I had a folder in "media/" called "d3-files/". In that "d3-files/" folder I put javascript to execute visualizations, supporting data and css, and I could call it on a post page like this:

&lt;/p&gt;&lt;pre class="prettyprint lang-html"&gt;
script type="text/javascript" src="/media/d3-files/time_series.js"
&lt;/pre&gt;

And to get the right path for media working, in settings.py we do:

&lt;pre class="prettyprint lang-python"&gt;
2 import os
3 #Tons of Code
49 # Absolute filesystem path to the directory that will hold user-uploaded files.
50 # Example: "/home/media/media.lawrence.com/media/"
51 MEDIA_ROOT = os.path.join(os.path.dirname(os.path.realpath(__file__)), '../media/')
52 
53 # URL that handles the media served from MEDIA_ROOT. Make sure to use a
54 # trailing slash.
55 # Examples: "http://media.lawrence.com/media/", "http://example.com/media/"
56 MEDIA_URL = '/media/'
&lt;/pre&gt;

and that's it.  Media to serve for all!  Just watch out, there's not a lot of space on Heroku for something like images. So you'll be better off hosting images elsewhere (photobucket, flickr, picasa, etc.) and embedding the tags in your posts.


&lt;p&gt;
Hopefully that helps in some fashion!
&lt;/p&gt;&lt;/div&gt;</description><category>django</category><category>mongodb</category><category>tutorial</category><category>web</category><guid>http://www.npcompleteheart.com/posts/what-is-the-structure-of-my-django-app.html</guid><pubDate>Wed, 20 Mar 2013 12:27:44 GMT</pubDate></item><item><title>Django nonrel, MongoDB, MongoHQ, and Heroku</title><link>http://www.npcompleteheart.com/posts/django-nonrel-mongodb-mongohq-and-heroku.html</link><dc:creator>Adam Pah</dc:creator><description>&lt;div&gt;&lt;p&gt;So you want to make a Django app with a MongoDB backend? &lt;/p&gt;
&lt;p&gt;Better yet do you want to deploy to Heroku and use MongoHQ so there's minimal set up on your end and a free testing sandbox?&lt;/p&gt;
&lt;p&gt;That's what I've done with this site (which is why it can be unresponsive also, I'm using all free at the moment).&lt;br&gt;
After doing it once I thought I had it down pat in terms of my online sources and thought that I could replicate 
that success with minimal fuss.  I was just proven wrong when I went too far, too fast and borked my app into a 
state that I didn't know how to fix it out of.  So here is an actual step by step, both for myself and others.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;

&lt;h3&gt;Update&lt;/h3&gt;
&lt;p&gt;This post survived for almost two months on the internet being correct about technology. Not too shabby. However, the wheels turn and things get outdated, namely that MongoDB was updated to 2.4 and changed behavior. By default all collections are capped and pymongo with the django fork wasn't handling that properly. If you follow the requirements list &lt;em&gt;exactly&lt;/em&gt; this will not work.  You need to update the version of PyMongo to version&amp;gt;2.5 for it to work. Happy Coding!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Resume Old Post&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;--------------&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;So you want to make a Django app with a MongoDB backend? &lt;/p&gt;
&lt;p&gt;Better yet do you want to deploy to Heroku and use MongoHQ so there's minimal set up on your end and a free testing sandbox?&lt;/p&gt;
&lt;p&gt;That's what I've done with this site (which is why it can be unresponsive also, I'm using all free at the moment).  After doing it once I thought I had it down pat in terms of my online sources and thought that I could replicate that success with minimal fuss.  I was just proven wrong when I went too far, too fast and borked my app into a state that I didn't know how to fix it out of.  So here is an actual step by step, both for myself and others.&lt;/p&gt;
&lt;p&gt;But as with all my posts, I want to put out the relevant sites that I've used and am cribbing heavily from (I'm nothing without the google).  So these are where my references are from:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.npcompleteheart.com/posts/django-nonrel-mongodb-mongohq-and-heroku.html" title="https://devcenter.heroku.com/articles/django"&gt;Heroku Guide to a Vanilla Django App&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.npcompleteheart.com/posts/django-nonrel-mongodb-mongohq-and-heroku.html" title="http://www.gdovicak.com/2012/02/Django-Nonrel-and-MongoDB-on-Heroku"&gt;G. Dovicak's awesome stub on configuring MongoHQ settings&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.npcompleteheart.com/posts/django-nonrel-mongodb-mongohq-and-heroku.html" title="http://docs.mongodb.org/manual/tutorial/write-a-tumblelog-application-with-django-mongodb-engine/"&gt;MongoDB's How to make a tumblelog tutorial&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Installing python, django-nonrel, and mongo support&lt;/h3&gt;
&lt;p&gt;Okay, so let's START!  First assumptions, you have python 2.7 with virtual environment installed as well as the &lt;a href="https://devcenter.heroku.com/articles/quickstart"&gt;heroku dev toolbelt&lt;/a&gt;. Okay, now that that is done we're going to taketh from the Heroku tutorial first and get the app started.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;mkdir djangoapp &amp;amp;&amp;amp; cd djangoapp
virtualenv venv --distribute
source venv/bin/activate
vi requirements.txt
pip install -r requirements.txt
&lt;/pre&gt;


&lt;p&gt;where you edit your requirements.txt file in vim and it then looks like:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;distribute==0.6.24
wsgiref==0.1.2
git+git://github.com/django-nonrel/django-nonrel.git@master
git+git://github.com/django-nonrel/django-permission-backend-nonrel.git@master
git+https://github.com/adamrpah/mongodb-engine.git
djangotoolbox==0.9.2
pymongo==2.4
&lt;/pre&gt;


&lt;p&gt;I took the advice in G. Dovicak's post and forked/cloned mongodb-engine as a git repository just so it was locked.  I don't feel that this step is entirely necessary, but you can feel free to use that fork if you want (it's public).
Now we have Django nonrel and its supporting packages installed inside a virtual environment.  &lt;/p&gt;
&lt;h3&gt;Starting a Django App and deploying it to Heroku&lt;/h3&gt;

&lt;p&gt;Next we start the app:&lt;/p&gt;
&lt;pre class="prettyprint lang-bash"&gt;
django-admin.py startproject djangoapp
&lt;/pre&gt;

&lt;p&gt;and let's check that it runs locally (checking at every step is how you make sure you haven't gone too far while borking something instrumental up).&lt;/p&gt;
&lt;pre class="prettyprint lang-bash"&gt;
python djangoapp/manage.py runserver
&lt;/pre&gt;

&lt;p&gt;Navigate to localhost:8000 in your web browser.  You should see a "It Works!" page.  Wooo! We have a Django app sans database now.&lt;/p&gt;
&lt;p&gt;So now let's get this app ready to ship out to Heroku.  To do that we need to create a Procfile that contains the process that Heroku should run. so we do:&lt;/p&gt;
&lt;pre class="prettyprint lang-bash"&gt;
vi Procfile
&lt;/pre&gt;

&lt;p&gt;and then insert into the file:&lt;/p&gt;
&lt;pre class="prettyprint lang-bash"&gt;
web python djangoapp/manage.py runserver 0.0.0.0:$PORT --noreload
&lt;/pre&gt;

&lt;p&gt;Next set up git with a proper gitignore, initialize the repository, add the files, and commit it.  Afterwards we work with heroku, creating a heroku app and pushing our django app repository to heroku.&lt;/p&gt;
&lt;pre class="prettyprint lang-bash"&gt;
vi .gitignore
git init
git add .
git commit -m 'initial django app'
heroku create
git push heroku master
&lt;/pre&gt;

&lt;p&gt;.gitignore file contents&lt;/p&gt;
&lt;pre class="prettyprint lang-bash"&gt;
*.pyc
venv
*.swp
&lt;/pre&gt;

&lt;p&gt;Now let's start up the process so that there's a dyno serving the website, check the activity on the heroku app to make sure it works, and view the 'It Works!' Django page in a browser to confirm.&lt;/p&gt;
&lt;pre class="prettyprint lang-bash"&gt;
heroku ps:scale web=1
heroku ps 
-&amp;gt; Scaling web processes... done, now running 1
heroku open
&lt;/pre&gt;

&lt;p&gt;Perfect!  We've launched our app in Heroku now.  &lt;/p&gt;
&lt;h3&gt;Configuring MongoHQ settings with Django&lt;/h3&gt;

&lt;p&gt;Let's get that Mongo database working as a complement to our django app.  We do that by enabling the MongoHQ add-on.&lt;/p&gt;
&lt;pre class="prettyprint lang-bash"&gt;
heroku addons:add mongohq:sandbox
&lt;/pre&gt;

&lt;p&gt;Now we actually have to figure out &lt;em&gt;WHERE&lt;/em&gt; and &lt;em&gt;HOW&lt;/em&gt; to connect to our MongoHQ database.  We do that by running&lt;/p&gt;
&lt;pre class="prettyprint lang-bash"&gt;
heroku config| grep "MONGOHQ"
-&amp;gt; MONGOHQ_URL:                  mongodb://USER:PASSWORD@linus.mongohq.com:PORT/APP_ID
&lt;/pre&gt;

&lt;p&gt;We see that the heroku config command gives us all of the pertinent connection information for our instance. Or as an even more explicit example, your where should look like:&lt;/p&gt;
&lt;pre class="prettyprint lang-bash"&gt;
heroku config| grep "MONGOHQ"
-&amp;gt; MONGOHQ_URL:                  mongodb://heroku:aaaaaaaaaaaaaaaaaaaaaaaaaa@linus.mongohq.com:10000/app55555
&lt;/pre&gt;

&lt;p&gt;Now we have to populate our django settings file with it.  Initially the database connection settings for your django app will look like this:&lt;/p&gt;
&lt;pre class="prettyprint lang-bash"&gt;
 12 DATABASES = {
 13     'default': {
 14         'ENGINE': 'django.db.backends.', # Add 'postgresql_psycopg2', 'mysql', 'sqlite3' or 'oracle'.
 15         'NAME': '',                      # Or path to database file if using sqlite3.
 16         'USER': '',                      # Not used with sqlite3.
 17         'PASSWORD': '',                  # Not used with sqlite3.
 18         'HOST': '',                      # Set to empty string for localhost. Not used with sqlite3.
 19         'PORT': '',                      # Set to empty string for default. Not used with sqlite3.
 20     }
 21 }
&lt;/pre&gt;

&lt;p&gt;We will change that to look like this using our heroku config settings:&lt;/p&gt;
&lt;pre class="prettyprint lang-bash"&gt;
 12 DATABASES = {
 13     'default': {
 14         'ENGINE': 'django_mongodb_engine', # Add 'postgresql_psycopg2', 'postgresql', 'mysql', 'sqlite3' or 'oracle'.
 15         'NAME': 'APPID',                      # Or path to database file if using sqlite3.
 16         'USER': 'USER',                      # Not used with sqlite3.
 17         'PASSWORD': 'PASSWORD',                  # Not used with sqlite3.
 18         'HOST': 'mongodb://linus.mongohq.com/APPID',                      # Set to empty string for localhost. Not used with sqlite3.
 19         'PORT': PORT,                      # Set to empty string for default. Not used with sqlite3.
 20     }
 21 }
&lt;/pre&gt;

&lt;p&gt;Or using our super explicit example:&lt;/p&gt;
&lt;pre class="prettyprint lang-bash"&gt;
 12 DATABASES = {
 13     'default': {
 14         'ENGINE': 'django_mongodb_engine', # Add 'postgresql_psycopg2', 'postgresql', 'mysql', 'sqlite3' or 'oracle'.
 15         'NAME': 'app55555',                      # Or path to database file if using sqlite3.
 16         'USER': 'heroku',                      # Not used with sqlite3.
 17         'PASSWORD': 'aaaaaaaaaaaaaaaaaaaaaaaaaa',                  # Not used with sqlite3.
 18         'HOST': 'mongodb://linus.mongohq.com/app55555',                      # Set to empty string for localhost. Not used with sqlite3.
 19         'PORT': 10000,                      # Set to empty string for default. Not used with sqlite3.
 20     }
 21 }
&lt;/pre&gt;

&lt;p&gt;Here are some important things to note, to make sure everyone is on the same page.  The USER will always be prepopulated as 'heroku', that's why I'm using it in our super explicit example.  So on line 16 it will look like&lt;/p&gt;
&lt;pre class="prettyprint lang-bash"&gt;
16         'USER': 'heroku',                      # Not used with sqlite3.
&lt;/pre&gt;

&lt;p&gt;even in your own settings. PASSWORD is a long string of numbers and digits, PORT is a 5 digit number, and APPID is app[0-9]{8} (app followed by 8 numbers). There is one important point to note and I screwed this up twice in a row on two different projects.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;
To connect to the MongoDB database it needs a port number that is an integer. 
By default there are string quotes in the field.&lt;br&gt;
DO NOT USE THE STRING QUOTES.  PUT IT IN AS AN INTEGER.
&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I have forgotten this both times, hopefully I (and who reads this) will not make the same mistake anymore. The last step is to comment out one line (line 115, 'django.contrib.sites') in the settings file to remove a default django behavior.&lt;/p&gt;
&lt;pre class="prettyprint lang-bash"&gt;
111 INSTALLED_APPS = (
112     'django.contrib.auth',
113     'django.contrib.contenttypes',
114     'django.contrib.sessions',
115     #'django.contrib.sites',
116     'django.contrib.messages',
117     'django.contrib.staticfiles',
118     # Uncomment the next line to enable the admin:
119     # 'django.contrib.admin',
120     # Uncomment the next line to enable admin documentation:
121     # 'django.contrib.admindocs',
122 )
&lt;/pre&gt;

&lt;p&gt;If we don't do this django will try to enter a site document into the Mongo database with a primary key of '1', which Mongo will not like and will stop your database sync.  Now we just have to package up these settings changes and push to heroku as&lt;/p&gt;
&lt;pre class="prettyprint lang-bash"&gt;
git add .
git commit -m 'Configured settings file to work with MongoHQ'
git push heroku master
&lt;/pre&gt;

&lt;p&gt;and now we very simply start up the database using the remote heroku machine with&lt;/p&gt;
&lt;pre class="prettyprint lang-bash"&gt;
heroku run python djangoapp/manage.py syncdb
&lt;/pre&gt;

&lt;p&gt;And we're there! Making a database user with a password finishes this round out.&lt;/p&gt;
&lt;h3&gt;Next Steps&lt;/h3&gt;

&lt;p&gt;Making models, templates, and so on as in the Mongo Tumblelog or do whatever you want!  You now have the base configuration to make a website.&lt;/p&gt;&lt;/div&gt;</description><category>django</category><category>mongodb</category><category>tutorial</category><category>web</category><guid>http://www.npcompleteheart.com/posts/django-nonrel-mongodb-mongohq-and-heroku.html</guid><pubDate>Thu, 14 Mar 2013 12:21:25 GMT</pubDate></item><item><title>A more thorough explanation and example on how to make a D3.js line graph</title><link>http://www.npcompleteheart.com/posts/a-more-thorough-explanation-and-example-on-how-to-make-a-d3js-line-graph.html</link><dc:creator>Adam Pah</dc:creator><description>&lt;div&gt;&lt;p&gt;This is actually the accompanying presentation I gave to our lab a few months ago on how to make the
line graph in d3.js that I posted earlier. It's intended for the lab audience (people who know how
to program and use the command line but have no experience with making a web page).  Hopefully it'll
be helpful to others.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;

&lt;p&gt;The repo link for the accompanying example is at &lt;a href="http://www.npcompleteheart.com/posts/a-more-thorough-explanation-and-example-on-how-to-make-a-d3js-line-graph.html" title="https://bitbucket.org/adamrpah/web-template"&gt;BitBucket&lt;/a&gt;.&lt;/p&gt;
&lt;iframe src="http://www.slideshare.net/slideshow/embed_code/16239817" width="476" height="400" frameborder="0" marginwidth="0" marginheight="0" scrolling="no"&gt;&lt;/iframe&gt;&lt;/div&gt;</description><category>d3js</category><category>presentations</category><category>tutorial</category><guid>http://www.npcompleteheart.com/posts/a-more-thorough-explanation-and-example-on-how-to-make-a-d3js-line-graph.html</guid><pubDate>Tue, 29 Jan 2013 12:19:33 GMT</pubDate></item></channel></rss>