<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="assets/xml/rss.xsl" media="all"?><rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" version="2.0"><channel><title>NP Complete Heart</title><link>http://www.npcompleteheart.com/</link><description>This is a place for the musings, thoughts, and technical notes of Adam Pah.</description><atom:link type="application/rss+xml" href="http://www.npcompleteheart.com/rss.xml" rel="self"></atom:link><language>en</language><lastBuildDate>Mon, 20 Apr 2015 19:06:43 GMT</lastBuildDate><generator>http://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>IPython Test</title><link>http://www.npcompleteheart.com/posts/ipython-test.html</link><dc:creator>Adam Pah</dc:creator><description>&lt;div tabindex="-1" id="notebook" class="border-box-sizing"&gt;
    &lt;div class="container" id="notebook-container"&gt;

&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;
In [1]:
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;
In [2]:
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt output_prompt"&gt;
    Out[2]:&lt;/div&gt;


&lt;div class="output_text output_subarea output_pyout"&gt;
&lt;pre&gt;
4
&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;
In []:
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt; 
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
</description><guid>http://www.npcompleteheart.com/posts/ipython-test.html</guid><pubDate>Mon, 20 Apr 2015 17:44:55 GMT</pubDate></item><item><title>MongoDB is for researchers</title><link>http://www.npcompleteheart.com/posts/mongodb-is-for-researchers.html</link><dc:creator>Adam Pah</dc:creator><description>&lt;div&gt;&lt;p&gt;Over the past three years I’ve been something of an evangelist for using MongoDB. This stance has
drawn derision from some outside the lab, which frequently forces me to clarify in what
circumstances I think MongoDB (or NoSQL in general) is so great. Unfortunately, I’ve been too lazy
to put those thoughts into writing, so this is my long overdue explanation and the first in a series
of posts describing how I use MongoDB daily.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;

&lt;h3&gt;MongoDB is for &lt;strike&gt;lovers&lt;/strike&gt; researchers and scientists&lt;/h3&gt;
&lt;p&gt;So I think the first question to tackle is why use a database at all? Here are the three basic
reasons that caused me to make a switch.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Speed.&lt;/strong&gt; If you’ve ever explored the parameter landscape of a model then you’ve likely
experienced the point when typing &lt;code&gt;ls *&lt;/code&gt; in your results folder can bring your system to its knees.
While there are ways to work around this problem (creating subfolders, smart naming conventions to
get groups of files), you can also just switch to storing the results in a database. Databases are
designed for storing millions of records easily.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Queries.&lt;/strong&gt; How many runs with parameters (rho, mu, sigma) have finished? Okay, now how many
of those runs have a final value of y? Not nearly as easy to answer is it? At best it would require
looking at the final line of every file. At worst, with some odd encoding scheme or additional forms
of output in the same file this could require parsing every file. Databases make answering these
types of questions quick and easy.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Portability.&lt;/strong&gt; Your data files need to be in a specified directory for your code to read
it. A folder for all your results needs to be in the right place too. Any time you want to test your
code those parts all need to be there and hopefully the ‘there’ isn’t in the same folder as your
code (I am an unabashed proponent of separating code, data, and results). For me, switching between
a laptop, workstation, and two different clusters, this can lead to some annoying inconsistencies
with file availability (specifically with large data files). Storing your data in a database with a
static IP address makes it easy to access anywhere.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is the start to why I think it’s a good idea to use a database, with another lurking reason
being that working knowledge of databases is required outside academia. If none of those reasons
resonate with you to explore these options then don’t worry, not everyone has the same research
problems as me.&lt;/p&gt;
&lt;h3&gt;So why X technology over Y technology?&lt;/h3&gt;
&lt;p&gt;If you wade too far into the internet you’ll find out that MongoDB is a type of NoSQL database and
that other types of databases are SQL databases. If you wade even a little bit further then a
torrent of flame wars will come pouring out of your monitor and you should just shut your eyes,
cover your ears, and pull your computer’s power plug out. Hopefully the following reasons will make
it slightly clear what the differences are without having to go dive into the recesses of the
internet. &lt;/p&gt;
&lt;p&gt;Ease of use - i.e. Schemaless. What does schemaless really mean?
When you use a SQL database you need to first create a database and then a table. Then once you
create a table you must give commands or use a GUI to establish the number of columns, the names of
columns, and, most importantly, the data type that each column can hold. When a record is entered
into the database it must have all those fields. If you decide to change your code and need to store
additional data fields then you must alter the table first (or else suffer an error!).&lt;/p&gt;
&lt;p&gt;With MongoDB you create a database and then insert a document into it. It will even lazily create
the collection that you told it to use. It can have any number of fields (or keys in Mongo/document
speak) and each key can be named however you want. The twist is when you go to insert a second
document. The second document doesn’t need the same number of keys, or key names, or even the
datatypes of the values associated with each key name. It allows you to do whatever at any time,
with any document in the database.&lt;/p&gt;
&lt;p&gt;Now this freedom is considered to be a flaw in some minds, but all I see is that the onus of
consistency is on the programmer (i.e. you). In the context of a single person, a small group, or a
research lab I don’t think that it’s much to expect that everyone act responsibly and document what
they’re doing (either in the README for the project and/or with explicit key names). The most
important thing to remember is that just about any technology can be detrimental to the workings of
a project if in the hands of an irresponsible idiot.&lt;/p&gt;
&lt;h4&gt;Dictionaries!&lt;/h4&gt;
&lt;p&gt;So this stems from being a pythonista, but when  I code I store things as dictionaries or classes
typically. MongoDB lets me shove that directly into the database since it works with natively with
dictionaries (Mongo’s data store is a BSON, which is more or less a JSON, which is almost a
dictionary). This isn’t so when working with a SQL database, since each record is stored in a row
(think of a CSV file), and for me this is a huge differentiation and selling point. &lt;/p&gt;
&lt;p&gt;Complex data structures can be natively stored in MongoDB and they are directly returned when I
query them.  So for me, when I run a simulation and there is a class keeping track of the time
evolution of the system at the end of the run I can just calculate whatever additional metrics are
necessary and save the dictionary into the database. When I need to analyze the results I can either
roll directly with the dictionary and start analyzing, it’s pretty simple.&lt;/p&gt;
&lt;h4&gt;Complex values.&lt;/h4&gt;
&lt;p&gt;I have stored datetime as a value, which isn’t really that special. What is special is when I store
a networkx graph object. Mongo will let you shove a fair number of things into it without requiring
you to convert them to a string. This is not only handy, but it cuts out code and processing steps
on file loading.&lt;/p&gt;
&lt;h4&gt;MapReduce.&lt;/h4&gt;
&lt;p&gt;This is more of a footnote but MapReduce is a great feature and can turn 24 hours of computation
time into one fairly quickly. &lt;/p&gt;
&lt;p&gt;These are the basic reasons why I use MongoDB, both in comparison to a file system and a SQL
database. I will never say that it’s the fastest or the best solution from a technical standpoint,
but it is the quickest and easiest solution in regards to my time, which is the most important thing
in my mind. I’m a researcher, not someone setting up production databases or something soul crushing
like that ;)&lt;/p&gt;&lt;/div&gt;</description><guid>http://www.npcompleteheart.com/posts/mongodb-is-for-researchers.html</guid><pubDate>Tue, 31 Mar 2015 18:49:20 GMT</pubDate></item><item><title>Auto-slugification, drafts, and cooler queries</title><link>http://www.npcompleteheart.com/posts/auto-slugification-drafts-and-cooler-queries.html</link><dc:creator>Adam Pah</dc:creator><description>&lt;div&gt;&lt;p&gt;Or more accurately, the list of things that I did last night to spiffy up the site. So what did I do in reality?&lt;/p&gt;
&lt;!-- TEASER_END --&gt;

&lt;h3&gt;Making slugs is boring, having slugs made is awesome&lt;/h3&gt;
&lt;p&gt;If you follow the MongoDB Tumblelog post you'll be starting with a website that is pretty functional. 
One of the things that it does do is it has you enter the slug field for each post in the admin section when you create it. 
What is a slug? It's the string in the url bar you see after "/post/" and it identifies the post location in the website. 
For me, and most of the time, we have the slug modelled after the post title so it is easily tracked. 
It's annoying though to re-enter the title normalized for slug usage.&lt;/p&gt;
&lt;p&gt;The first thing I tried was adding the prepopulated fields line to the &lt;code&gt;admin.py&lt;/code&gt; file. 
This was supposed to prepopulate a slug field for a Post model using this code:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="n"&gt;class&lt;/span&gt; &lt;span class="n"&gt;PostAdmin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;admin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ModelAdmin&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
     &lt;span class="n"&gt;prepopulated_fields&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"slug"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;,)}&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;but the admin section wasn't happy with this. 
Posts entered without a slug would be flagged as having an error (due to omission of the slug field). 
Quick googling suggests that there could be a problem with using django 1.3, and maybe django non-rel, but I didn't dwell on it too long.
Instead I found django-autoslug. Installation is simple&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;django&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;autoslug&lt;/span&gt;
&lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;freeze&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;requirements&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;txt&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;and using it in the blog model is as easy as&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="n"&gt;autoslug&lt;/span&gt; &lt;span class="n"&gt;import&lt;/span&gt; &lt;span class="n"&gt;AutoSlugField&lt;/span&gt;
&lt;span class="cp"&gt;#Other imports&lt;/span&gt;
&lt;span class="n"&gt;class&lt;/span&gt; &lt;span class="n"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;slug&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;AutoSlugField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;populate_from&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="n"&gt;Other&lt;/span&gt; &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="n"&gt;attributes&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;after that the slug field is removed from the admin section, slugs are automatically populated upon post addition, and the slugs are normalized to the title of the post. 
Awesome!&lt;/p&gt;
&lt;h3&gt;But I'm going to want to save partial work on the web content and query the heck out of the DB!&lt;/h3&gt;
&lt;p&gt;For the next part I just wanted to add a draft field to the Post model so I could write posts on the admin section, 
leave them half-finished but saved to the database so I could pick them up and finish them from anywhere. 
That's a really simple change to the model of course, just:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="n"&gt;class&lt;/span&gt; &lt;span class="n"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="n"&gt;Other&lt;/span&gt; &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="n"&gt;fields&lt;/span&gt;
    &lt;span class="n"&gt;draft&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BooleanField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;blank&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;help_text&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Save as a draft on the server"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Now what we could do is just handle the display of this in the template if need be. 
All posts are queried for when we want to display the list of available posts on the homepage. 
This is the 'ListView' from the Tumblelog tutorial and we could solve it in the template easily like this&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;% if not post.draft %&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;---&lt;/span&gt; Display post code &lt;span class="o"&gt;--&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;% endif %&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;but this doesn't really seem that great. We're still loading the data from the database, it's just not being displayed using the template. 
It feels like we should really go the extra step here.&lt;/p&gt;
&lt;p&gt;So what do you do? We should change the query in the url of course! Even better, let's get some real mongo access. 
In the blog models.py we can actually open up the ability to do a raw query using django_mongodb_engine by:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="n"&gt;django_mongodb_engine&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;contrib&lt;/span&gt; &lt;span class="n"&gt;import&lt;/span&gt; &lt;span class="n"&gt;MongoDBManager&lt;/span&gt;

&lt;span class="n"&gt;class&lt;/span&gt; &lt;span class="n"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="n"&gt;Other&lt;/span&gt; &lt;span class="n"&gt;attributes&lt;/span&gt;
    &lt;span class="n"&gt;objects&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MongoDBManager&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;and we can change our queryset in urls.py for the list view to be:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;    &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="err"&gt;$'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PostListView&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as_view&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;queryset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;raw_query&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="n"&gt;draft&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;False&lt;/span&gt;&lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="n"&gt;order_by&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="n"&gt;created_at&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
        &lt;span class="n"&gt;context_object_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"posts_list"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"home"&lt;/span&gt;
    &lt;span class="p"&gt;),&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Whereas before it was:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="err"&gt;$'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PostListView&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as_view&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;queryset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;order_by&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="n"&gt;created_at&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
    &lt;span class="n"&gt;context_object_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"posts_list"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"home"&lt;/span&gt;
&lt;span class="p"&gt;),&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;What we've done is open up the raw_query field on objects. Now we can actually issue more complicated queries to the database. 
While not essential now, this will be very useful for more complicated models/data types in the future.&lt;/p&gt;
&lt;p&gt;And that was it, pretty fun, pretty simple, and fairly functional. As always this has been cribbed from the work of others and googling, 
I just didn't keep track of my sources that well last night.&lt;/p&gt;&lt;/div&gt;</description><guid>http://www.npcompleteheart.com/posts/auto-slugification-drafts-and-cooler-queries.html</guid><pubDate>Tue, 19 Mar 2013 19:01:25 GMT</pubDate></item><item><title>I guess posting content does make a difference</title><link>http://www.npcompleteheart.com/posts/i-guess-posting-content-does-make-a-difference.html</link><dc:creator>Adam Pah</dc:creator><description>&lt;p&gt;&lt;img alt="Website Stats" src="http://www.npcompleteheart.com/images/posting_content.jpg"&gt;&lt;/p&gt;</description><guid>http://www.npcompleteheart.com/posts/i-guess-posting-content-does-make-a-difference.html</guid><pubDate>Sat, 16 Mar 2013 18:59:17 GMT</pubDate></item><item><title>A short introduction to Mercurial</title><link>http://www.npcompleteheart.com/posts/a-short-introduction-to-mercurial.html</link><dc:creator>Adam Pah</dc:creator><description>&lt;div&gt;&lt;p&gt;We switched from SVN to Mercurial in my lab about a year ago now after we considered all of our
needs as a bunch of researchers, many of whom don't want to care about or are not that interested in
the tools we use.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;

&lt;p&gt;In the meantime, I've kept sharing the slide decks I prepped with @frrrmack out of my dropbox folder
with strangers.  That's pretty annoying since I have to add a person's e-mail to it each time. So
I'm putting them here so it'll be quick and easy.&lt;/p&gt;
&lt;p&gt;The first one is a quick introduction as to why you would want to switch away from SVN to Mercurial
based on the benefits.  The second is a near exhaustive tutorial on how to do set up and use
Mercurial.&lt;/p&gt;
&lt;p&gt;There's definitely some pictures from &lt;a href="http://www.hginit.com"&gt;hg init&lt;/a&gt; in the
introduction, so thanks for the great picture!&lt;/p&gt;
&lt;p&gt;Enjoy!&lt;/p&gt;
&lt;iframe src="http://www.slideshare.net/slideshow/embed_code/16228692" width="476" height="400" frameborder="0" marginwidth="0" marginheight="0" scrolling="no"&gt;&lt;/iframe&gt;

&lt;iframe src="http://www.slideshare.net/slideshow/embed_code/16228847" width="476" height="400" frameborder="0" marginwidth="0" marginheight="0" scrolling="no"&gt;&lt;/iframe&gt;&lt;/div&gt;</description><guid>http://www.npcompleteheart.com/posts/a-short-introduction-to-mercurial.html</guid><pubDate>Mon, 28 Jan 2013 18:45:04 GMT</pubDate></item><item><title>Computers are not magical things, but at times they are beyond temperamental creatures</title><link>http://www.npcompleteheart.com/posts/computers-are-not-magical-things-but-at-times-they-are-beyond-temperamental-creatures.html</link><dc:creator>Adam Pah</dc:creator><description>&lt;div&gt;&lt;p&gt;I upgraded to OSX Lion over winter break (a post about which was supposed to be written forever
ago), but I finally have come back to it. Upgrading has been completely obnoxious. If it weren't for
how much I really need effective password management software (1Password, for what it is worth), I
would have downgraded to Snow Leopard immediately. This is just a short collection of the fixes that
I've done since switching (or what I can remember of them).&lt;/p&gt;
&lt;!-- TEASER_END --&gt;

&lt;p&gt;&lt;strong&gt;Adobe and the lack of printing&lt;/strong&gt; This is the simplest fix, do you use CS3 and it now will not print
(and it crashes when it does)? This is actually easily fixed. All you have to do is delete the Adobe
PPDs from the following folders:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Library&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Printers&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;PPDs&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;contents&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Resources&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;en&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lproj&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Library&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Printers&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;PPDs&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;contents&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Resources&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ko&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lproj&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Library&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Printers&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;PPDs&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;contents&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Resources&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Ja&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lproj&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Library&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Printers&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;PPDs&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;contents&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Resources&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Zh_CN&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lproj&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Library&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Printers&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;PPDs&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;contents&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Resources&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Zh_TW&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lproj&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;&lt;a href="http://forums.adobe.com/message/3870055"&gt;Credit Where Credit is Due&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;MacFuse/MacFusion and the lack of 64-bit support&lt;/strong&gt; I've been using MacFuse with MacFusion for a long
time now in order to do file system mounting over ssh (if you're not familiar with this concept it's
awesome, you mount a remote directory over ssh and it's just like it was there locally). Now at some
point MacFuse, as it was, was no longer developed for the newer versions of OS X. There are two ways
around this, the first I found on a forum and required downloading 3 files to 'fix' Fuse. This is
not the optimal solution, because there is some odd behavior in file management when not using the
command line (GUI programs would be unable to save to anything but a new file handle). The better
solution is to download the new OS X Fuse . It works awesome, just as MacFuse used to.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;RVM and X Code&lt;/strong&gt; Using Ruby version manager is wonderful; however, it and the packages definitely did
not agree with the lion upgrade. The biggest reason is because of the switch to llvm-gcc instead of
gcc. This was actually a pretty easy (and completely awesome to learn fix), somebody actually went
and got plain old gcc for OS X. This actually makes it so that you don't need to install X Code to
get everything working (Saving 1GB of downloading) but you will probably have to download it
anyways. They're hosting it on GitHub . So far, I consider this the best thing ever. You just need
to set it now as the default gcc compiler and now packages will magically install again.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;MacPorts, X Code, and so many head bashing moments&lt;/strong&gt; Now this was the worst part of the process (and
what I put off for 3 months). MacPorts needs to be completely redone and upgraded to work in Lion.
This wouldn't be nearly as bad, if it didn't involve uninstalling everything that was installed to
begin with. Absolutely, make sure that you have the time to do this. The basic steps are all outline
on the MacPorts Migration page. The even better part is that the automatically reinstall script does
work, so don't bother doing this again by hand. However......&lt;/p&gt;
&lt;p&gt;This all relies on X code working (ah ha, you know how I said you'll have to download anyway?). So
now that X Code is at version 4.3 in the Mac App Store, which is the only place to get it now, it
actually installs when you 'purchase' it there (it used to not prior to version 4.3). But installing
it isn't good enough, you have to also download the command line tools. This is found in the
'Download' pane of the X Code Preferences. Now is the time to try and see if you can install
programs from MacPorts. If a program installs, Congratulations! It's all over. However, if it says
something like 'A new version of X Code must be installed version 3.2 is too old' then we have to do
one more thing.&lt;/p&gt;
&lt;p&gt;X Code 4.3 installs in a different location than before. For some reason, instead of being in:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Developer&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Applications&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;it's now in:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Applications&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;just like every other application. However, for some inexplicable reason, MacPorts doesn't auto
recognize and you have to tell it where to look for the new X Code install (this is the head-bashing
part to figure out). Now the way to tell it how to do that is:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;xcode&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;select&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Applications&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Xcode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Contents&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Developer&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;and now that it knows where to look, we have total utter success. Now I just hope that you planned
for approximately the 1 day install time to get back to where you were before.
Hope it helps and enjoy!&lt;/p&gt;&lt;/div&gt;</description><guid>http://www.npcompleteheart.com/posts/computers-are-not-magical-things-but-at-times-they-are-beyond-temperamental-creatures.html</guid><pubDate>Wed, 23 Jan 2013 18:26:13 GMT</pubDate></item><item><title>First times at RoR and how I got up and running</title><link>http://www.npcompleteheart.com/posts/first-times-at-ror-and-how-i-got-up-and-running.html</link><dc:creator>Adam Pah</dc:creator><description>&lt;div&gt;&lt;p&gt;This blog is my first time starting a web page (for real at least) and using Ruby on Rails. Despite
having some prior experience with Django I chose Ruby on Rails for two main reasons: (1) it
integrates seamlessly with Heroku, which is an amazing service (for free! at least for my needs)
that provides basic app hosting and is not replicated on the Django side of web development and (2)
it's something I haven't done yet and I would rather learn something new. I'm not a massive fan of
Django, so even though my primary programming experience is in python it didn't deter me from
switching over for this. At a later point, I may detail what I feel are the differences between the
platforms and which one excels in what area, but there's plenty on the web that goes on about the
differences already.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;

&lt;p&gt;So the real meat of this post is to detail how I went from absolutely nothing to a working blog, the
actual resources I used and in what order (clear up conflicting suggestions from just mindlessly
following google links which is how this got going), and to give credit where credit is due (if you
go through any of these tutorials you can see how liberally I used the default CSS templates they
generate, the CSS/HTML is my definitive weak point).&lt;/p&gt;
&lt;h3&gt;Installing Ruby&lt;/h3&gt;
&lt;p&gt;When I first went to go use Ruby there were some initial conflicts, since the newest version of
Rails wasn't compatible with the version of Ruby that came stock on my computer (OS X 10.6 Snow
Leopard). What I thought was the obvious answer from my python experience was to open up MacPorts
and download the newest version of Ruby and Rails, not thinking that there were better solutions
available (MacPorts is as good as it gets). I actually did get it up and running but not before
spending a lot of time resolving the issue with rake (v0.9.0 was giving problems with the gemfile)
and then mucking it all up by using a different version to check out and play with an app that was
already written but with an earlier rails version.&lt;/p&gt;
&lt;p&gt;The hilarious thing is, that there is a solution for this with RoR and it's great (despite the
problems it's giving me now in checking out a head version of Ruby to use), it's RVM--Ruby Version
Manager . It actually does work exactly as the tutorial shows (a real rarity) and it's simple,
making it a terrible idea to try and manage Ruby yourself through MacPorts. The only hacky thing I
did was to actually put a single line in my bash_profile to automatically use the default ruby
because at some point it stopped initializing properly. This subsequently caused me to curse
frequently when Rails would error out on starting a server. If that effects you then just execute:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="n"&gt;rvm&lt;/span&gt; &lt;span class="n"&gt;use&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;~/&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bashrc&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;and it will resolve the problem, indefinitely. It does require that it executes every time you open
a new terminal tab, so if that bothers you then you are properly warned.
At this point you should also go ahead and sign up for GitHub and Heroku (if you plan on actually
putting it on the web, otherwise just Git. Version control is a lifesaver when you don't entirely
understand what you are doing).&lt;/p&gt;
&lt;h3&gt;Starting your Rails App&lt;/h3&gt;
&lt;p&gt;I started by using the Ruby on Rails tutorial to get the basic sauce of the website working. I also
heavily used another resource to get the basic CSS and html of the website working, but I
unfortunately cannot find it to save my life. At the same time I also immediately set up users and
user authentication, I would highly recommend NOT doing this. Trying to do everything at once was
not a seamless process when I was still grappling with the basics of getting the website up and
running. Play around with Rails and get all the basic functionality that you want along with the
styling that makes you happy enough to proceed and then start mucking it all up by adding
authentication.&lt;/p&gt;
&lt;p&gt;For user adding and authentication I decided on using Devise and CanCan, since it didn't require
nearly as much work on my part and seemed to be a fairly easy set up and go process. That didn't
turn out to be entirely true, but that was more my own fault. Instead of sitting down and getting it
running in one go I pecked at it in bits and pieces, forgetting where I was when I last ran out of
time trying to set it up. The tutorial that I used the most (and should be sufficient to create the
entire process) can be found here and the follow up here. Although to be honest, my real problems
occurred when I forgot the password to the user I created and subsequently tried creating a new user
to supercede the old one when I had, effectively, locked myself out of my own app. If you make this
same boneheaded mistake, I'll tell you now that it's just easier to go straight into the database
and correct, so long as you are comfortable with basic SQL.&lt;/p&gt;
&lt;h3&gt;How does this CSS thing work?&lt;/h3&gt;
&lt;p&gt;This by far my weakest point. I really don't entirely understand how to use HTML and CSS although
even initially I understood the reasons for using both and it makes sense (HTML for content, CSS for
design). Even using the tutorial from the Rails app and the stock CSS it came with to start I still
had lots of trouble modifying it to give me a look that I was at least semi satisfied with. One
night I just bit the bullet and went all the way through the tutorials at HTMLDog. This didn't
resolve my problems, it didn't make me like CSS or HTML any more (or less), than I already did, but
it gave me enough of a basic understanding of the languages and what terms were used for what that I
could actually start googling for what I wanted to do and get results. If you are coming at this
from a programming starting point instead of a design standpoint this is by far the hardest part.
HTML and CSS don't give stack traces and errors like real code does, it just takes what you give it
and then does whatever the hell it wants with it, with no real indication as to why what you told it
isn't going to be sufficient. Annoying to say the least.&lt;/p&gt;
&lt;h3&gt;Getting it onto the web&lt;/h3&gt;
&lt;p&gt;This part is by far the easiest, just buy a domain and set it up. There's a video in the Heroku
articles section that explains how to set it up with GoDaddy and after that you're done! The video
is only outdated on one aspect, setting up a CNAME with domainname.com. to refer to the site without
the 'www' doesn't work anymore. GoDaddy wants you to do that using their domain forwarding, which
can be set up from the dashboard page for your domain. 
Now breathe a sigh of relief when everything works.&lt;/p&gt;
&lt;p&gt;That's it! From start to finish of how I got going and a rundown of the tutorials that can be used.
If you want to stray go for it (this website obviously isn't perfect and I'll be heavily modifying
it as I get a better grip on using all of these things) but just be careful about what you start
following. There are lots of Rails tutorials still kicking around from earlier versions and the
techniques and code used don't all work in Rails 3. Reading first to make sure it's applicable saves
you the pain of implementing and then banging your head against the screen as you get nothing but
errors.&lt;/p&gt;&lt;/div&gt;</description><guid>http://www.npcompleteheart.com/posts/first-times-at-ror-and-how-i-got-up-and-running.html</guid><pubDate>Mon, 23 Jan 2012 18:07:14 GMT</pubDate></item></channel></rss>